swagger: '2.0'
info:
  version: 0.0.0
  title: SESAM Portal
paths:
  /api:
    get:
      operationId: api.root.get
      description:
        Returns information about the sesam portal.
      produces:
        - application/json

      responses:
        200:
          description: OK
          schema:
            type: object
            additionalProperties: false
            required:
              - status
              - authentication_providers
            properties:
              status:
                type: object
                additionalProperties: false
                required:
                  - feature-level
                properties:
                  feature-level:
                    description: A positive integer that indicates which api features this version of the sesam-portal supports.
                    type: integer

                  # TODO in IS-8199: remove "version and "revision"
                  version:
                    type: string

                  revision:
                    type: string

                  teamcity-buildnumber:
                    type: string
                    description:
                      This is an internal value that refers to the build-job that produced this version of the
                      sesam portal.

                  git-revision:
                    type: string
                    description:
                      This is an internal value that refers to the git revision that was used to build this
                      version of the sesam portal.

                  build-date:
                    type: string

                  start_time:
                    type: string

                  uptime:
                    type: string

                  health_status:
                    type: object
                    additionalProperties: false
                    required:
                      - status
                    properties:
                      status:
                        type: string
                        enum: ["ok", "not ok"]

                      message:
                        description:
                          If the status is not "ok", this property contains a human-readable message describing the problem.
                        type: string

                  is_itest_mode:
                    type: boolean

                  is_fallback_mode:
                    type: boolean

                  is_email_verification_required:
                    type: boolean

                  is_internal_users_enabled:
                    type: boolean
                  tos_version:
                    type: number

              authentication_providers:
                description:
                  This is a list of third party authentication providers.
                type: array
                items:
                  type: object
                  required:
                    - id
                    - login_url
                  properties:
                    id:
                      type:
                        string
                      description:
                        The unique id of the provider

                    login_url:
                      type: string
                      description:
                        The url to go to to start authenticating with this provider

                    login_button_icon:
                      type: string
                      description:
                        Optional. An url to the icon that should be used on the login-button for this provider.

                    login_button_text:
                      type: string
                      description:
                        Optional. The text to display on the login button.

                    login_button_tooltip:
                      type: string
                      description:
                        Optional. The mouse-over tooltip to display on the login button.
              tos_version:
                type: number
                description: The current version of the Terms of Service

  /api/profile:
    get:
      description:
        Returns information about the currently logged-in user.
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Profile'
    put:
      description:
        Updates information about the currently logged-in user.

        This endpoint accepts the same json structure as the GET /api/profile endpoint produces, but only a few of the
        fields in that structure will be used, since the user is only allowed to change a few of the fields.
        The "name" field can be changed, but the "email" field can not be changed, for instance.

        This endpoint also accept a "sparse" json-structure, that only contains the field(s) that the client wants to
        modify. The values represented by any "missing" fields will not be modified; if for instance the json only
        contains the "picture"-field, the "name"-field will not be modified.

      produces:
        - application/json

      parameters:
        - in: body
          name: body
          description: Updated information about the user
          schema:
            type: object
            additionalProperties: true
            required:
              - userInfo
            properties:
              userInfo:
                type: object
                additionalProperties: true
                properties:
                  profile:
                    type: object
                    additionalProperties: true
                    properties:
                      nickname:
                        type: string
                        example: knut.johannessen
                      name:
                        type: string
                        example: Knut Johannessen
                      picture:
                        type: string
                        example: https://s.gravatar.com/avatar/d0101a13dfbf2cb6c418676c4bd51074?s=480&r=pg&d=https%3A%2F%2Fcdn.auth0.com%2Favatars%2Fkn.png
                  isPortalAdmin:
                    type: boolean
                    description:
                      This property can only be modified by the special portal-admin users. The portal-admin
                      powers of such users are disabled by default, and must be explicitly activated by
                      setting this property to 'true'.
                  providerWhitelist:
                    type: array
                    items:
                      type: string
                  providerIds:
                    type: array
                    items:
                      type: string
                  approvedTos:
                    type: number

      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Profile'

  /api/profile2:
    get:
      description:
        Returns information about the currently logged-in user. If the user is not logged in
        a 401 response is returned instead.
        TODO replace the "/api/profile" endpoint with this when we deploy the unified frontend.
      produces:
        - application/json
      responses:
        200:
          description: This returns the same response as the /api/profile endpoint
          schema:
            $ref: '#/definitions/Profile'

        401:
          description: The user is not logged in

  /api/profile/{user_id}:
    delete:
      operationId: api.profile.delete_user

      description:
        Deletes the specified user.
      produces:
        - application/json
      parameters:
        - name: user_id
          in: path
          description: The id of the user to delete.
          required: true
          type: string
      responses:
        200:
          description: OK

  /api/jwt:
    get:
      description:
        Returns the JSON Web Token for the currently logged in user.
      produces:
        - text/plain
      responses:
        200:
          description: OK

    post:
      description:
        Returns the JSON Web Token for the user described in the post parameters (email+password).
      consumes:
        - application/x-www-form-urlencoded
        - multipart/form-data
      produces:
        - text/plain
      parameters:
        - name: email
          in: formData
          description: The email of the user
          required: true
          type: string

        - name: password
          in: formData
          description: The password of the user
          required: true
          type: string

        - name: subscription_id
          in: formData
          description:
            The id of the subscription to return the JWT for. If this is not specified, a JWT for all the
            user's subscriptions will be returned.
          required: false
          type: string

      responses:
        200:
          description: OK


  /api/subscriptions/{subscription_id}/jwt:
    get:
      operationId: api.jwt.get_subscription_jwt
      description:
        Returns the JSON Web Token for the specified subscription for the currently logged in user.
      produces:
        - text/plain
      parameters:
        - name: subscription_id
          in: path
          description: The subscription id
          required: true
          type: string
      responses:
        200:
          description: OK


  /api/jwt/publickey:
    get:
      description:
        Returns the RSA public key that can be used to verify the JWT signature
      produces:
        - text/plain
      responses:
        200:
          description: OK

  /api/jwt/zendesk:
    get:
      description:
        Returns the JWT to be used with the Zendesk authentication api for the currently logged in user
      produces:
        - text/plain
      responses:
        200:
          description: OK
        501:
          description: Not implemented. Configuration for Zendesk is missing in the portal

  /api/jwt/zendesk-chat:
    get:
      operationId: api.jwt.zendesk.get_zendesk_chat_jwt
      description:
        Returns the JWT to be used with the Zendesk Chat authentication api for the currently logged in user
      produces:
        - text/plain
      responses:
        200:
          description: OK
        501:
          description: Not implemented. Configuration for Zendesk is missing in the portal

  /api/subscriptions:
    get:
      description:
        Returns the subscriptions that this user is connected to.
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Subscription'

    post:
      description:
        Creates a new subscription

      produces:
        - application/json

      parameters:
        - in: body
          name: body
          description: Settings for the new subscription
          required: false
          schema:
            $ref: "#/definitions/NewSubscriptionInfo"

      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Subscription'


  /api/subscriptions/{subscription_id}:
    get:
      operationId: api.subscriptions.get_subscription
      description:
        Returns information about the specified subscription
      produces:
        - application/json
      parameters:
        - name: subscription_id
          in: path
          description: The subscription id
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Subscription'

    delete:
      operationId: api.subscriptions.delete_subscription
      description:
        Deletes the specified subscription
      produces:
        - application/json
      parameters:
        - name: subscription_id
          in: path
          description: The subscription id
          required: true
          type: string
      responses:
        200:
          description: OK

    put:
      operationId: api.subscriptions.put_subscription
      description:
        Update the subscription
      produces:
        - application/json

      parameters:
        - name: subscription_id
          in: path
          description: The subscription id
          required: true
          type: string

        - in: body
          name: body
          description: Updated settings for the subscription
          required: true
          schema:
            $ref: "#/definitions/UpdatedSubscriptionInfo"

      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Subscription'


  /api/subscriptions/{subscription_id}/available-roles:
    get:
      operationId: api.subscriptions.get_subscription_available_roles
      description:
        Returns a list of the roles that are available for the specified subscription. This includes the build-in
        roles and any custom-roles that has been created in the subscription.
      produces:
        - application/json
      parameters:
        - name: subscription_id
          in: path
          description: The subscription id
          required: true
          type: string

      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/RoleInfo"

    post:
      operationId: api.subscriptions.add_custom_role
      description:
        Adds a new custom-role.
      produces:
        - application/json
      parameters:
        - name: subscription_id
          in: path
          description: The subscription id
          required: true
          type: string

        - name: body
          in: body
          description: The information about the new custom-role
          required: true
          schema:
            $ref: "#/definitions/RoleInfo"

      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/RoleInfo"

  /api/subscriptions/{subscription_id}/licenses:
    post:
      operationId: api.subscriptions.renew_subscription_license
      description:
        Renews the subscription's license. This extends the current license's expirationdate, but keeps all other
        license-values the same. Returns the updated Subscription.
      produces:
        - application/json
      parameters:
        - name: subscription_id
          in: path
          description: The subscription id
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Subscription'

  /api/subscriptions/{subscription_id}/api_json_web_tokens:
    get:
      operationId: api.subscription_api_jwts.get_json_web_tokens
      description:
        Returns a list of the api JWT tokens for this subscription
      produces:
        - application/json
      parameters:
        - name: subscription_id
          in: path
          description: The subscription id
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/SubscriptionJWT'

    post:
      operationId: api.subscription_api_jwts.post_json_web_token
      description:
        Creates a new API JWT for the specified subscription. These are json web tokens that are intended for
        use by things like scripts and cron-jobs, where you need a long-lasting JWT with a specific set of roles.
      produces:
        - application/json
      parameters:
        - name: subscription_id
          in: path
          description: The subscription id
          required: true
          type: string
        - name: jwt_settings
          in: body
          description: The JWT parameters.
          required: true
          schema:
            type: object
            additionalProperties: false
            required:
              - exp
              - principals
            properties:
              name:
                description:
                  A user-assigned name for this token. This is optional and is only used in the GUI.
                type: string
              description:
                description:
                  A user-assigned description of this token. This is optional and is only used in the GUI.
                type: string
              exp:
                description:
                  The expiration-date to set on the new JWT.  This is measured in number of seconds since the Epoch.
                type: number
                example: 2349343498
              refresh_interval:
                description:
                  Optional. If this is specified, the resulting JWT must be refreshed at the specified rate. In this
                  case the 'exp' property describes the last time the JWT can be refreshed.
                type: number
                example: 900
              principals:
                description:
                  A list of the principals that the JWT should grant
                type: array
                items:
                  type: string
                  example: "group:Developer"

      responses:
        200:
          description: The new SubscriptionJWT
          schema:
            $ref: '#/definitions/SubscriptionJWT'


  /api/subscriptions/{subscription_id}/api_json_web_tokens/{api_json_web_token_id}:
    delete:
      operationId: api.subscription_api_jwts.delete_json_web_token
      description:
        Deletes the specified api JWT token
      produces:
        - application/json
      parameters:
        - name: subscription_id
          in: path
          description: The subscription id
          required: true
          type: string
        - name: api_json_web_token_id
          in: path
          description: The api jwt id
          required: true
          type: string
      responses:
        200:
          description: OK


  /api/subscriptions/{subscription_id}/available-roles/{role_id}:
    get:
      operationId: api.subscriptions.get_subscription_role
      description:
        Returns information about the specified role in the specified subscription.
      produces:
        - application/json
      parameters:
        - name: subscription_id
          in: path
          description: The subscription id
          required: true
          type: string

        - name: role_id
          in: path
          description: The role id
          required: true
          type: string

      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/RoleInfo"


    delete:
      operationId: api.subscriptions.delete_subscription_role
      description:
        Deletes the specified role in the specified subscription.
      produces:
        - application/json
      parameters:
        - name: subscription_id
          in: path
          description: The subscription id
          required: true
          type: string

        - name: role_id
          in: path
          description: The role id
          required: true
          type: string

      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/RoleInfo"

    put:
      operationId: api.subscriptions.put_subscription_role
      description:
        Updates the specified role in the specified subscription.
      produces:
        - application/json
      parameters:
        - name: subscription_id
          in: path
          description: The subscription id
          required: true
          type: string

        - name: role_id
          in: path
          description: The role id
          required: true
          type: string

        - name: body
          in: body
          description: The updated information about the custom-role
          required: true
          schema:
            $ref: "#/definitions/RoleInfo"

      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/RoleInfo"


  /api/subscriptions/{subscription_id}/members:
    get:
      operationId: api.subscriptions.get_subscription_members
      description:
        returns a list of the members in the subscription
      produces:
        - application/json
      parameters:
        - name: subscription_id
          in: path
          description: The subscription id
          required: true
          type: string

        - name: limit
          in: query
          description:
            Specifies the maximum number of members to return. If this is not specified, all available
            members are returned.
          required: false
          type: integer

        - name: start
          in: query
          required: false
          type: integer
          description:
            The index of the first member to return. This defaults to 0 (zero), which means to start at the beginning
            of the list of members. The 'start' parameter can be used in conjunction with the 'limit' parameter to
            implement pagination.
          default: 0

      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/SubscriptionMemberInfo'

    post:
      operationId: api.subscriptions.post_subscription_members
      description:
        Invites a user to the subscription
      produces:
        - application/json
      parameters:
        - name: subscription_id
          in: path
          description: The subscription id
          required: true
          type: string

        - in: body
          name: body
          description: Information about the user to invite
          required: true
          schema:
            $ref: "#/definitions/InvitedUser"

      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/SubscriptionMemberInfo"


  /api/subscriptions/{subscription_id}/members/{user_id}:
    get:
      operationId: api.subscriptions.get_subscription_member
      description:
        returns information about the roles the specified user has in the subscription
      produces:
        - application/json
      parameters:
        - name: subscription_id
          in: path
          description: The subscription id
          required: true
          type: string

        - name: user_id
          in: path
          description: The user id
          required: true
          type: string

      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/SubscriptionMemberInfo'

    put:
      operationId: api.subscriptions.put_subscription_member
      description:
        updates the roles the specified user has in the subscription
      produces:
        - application/json
      parameters:
        - name: subscription_id
          in: path
          description: The subscription id
          required: true
          type: string

        - name: user_id
          in: path
          description: The user id
          required: true
          type: string

        - in: body
          name: body
          description: Information about the new roles of the user
          required: true
          schema:
            $ref: "#/definitions/UpdatedSubscriptionMemberInfo"

      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/SubscriptionMemberInfo'


  /api/subscriptions/{subscription_id}/pipes/{pipe_id}/available-notification-ruletypes:
    get:
      description:
        Returns a list of the available notification rule types on the specified pipe. The idea is that the
        client can use this list to dynamically generate a gui that lets the user add and edit notification
        rules.

      operationId: api.notifications.get_available_notification_ruletypes

      parameters:
        - name: subscription_id
          in: path
          description: The subscription id
          required: true
          type: string

        - name: pipe_id
          in: path
          description: The pipe id
          required: true
          type: string

      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/PipeNotificationRuleTypeInfo"


  /api/admin/config/validation_hack_for_NewPipeNotificationRuleInfo:
    put:
      operationId: api.notifications.validation_hack_for_NewPipeNotificationRuleInfo
      description:
        This is a dummy endpoint that is used to register the NewPipeNotificationRuleInfo definition,
        so that it can be used to validate configuration entities in the python code. The endpoint
        just returns a 400 response.
      produces:
        - application/json
      parameters:
        - in: body
          name: new_notification_rule_info
          description: Information about the notification_rule
          required: true
          schema:
            $ref: "#/definitions/NewPipeNotificationRuleInfo"
      responses:
        400:
          description: This endpoint will always return a 400 response

  /api/subscriptions/{subscription_id}/notification-rules:
    get:
      description:
        Returns a list of the notification rules for all pipes in the subscription
      operationId: api.notifications.get_notification_rules_for_all_pipes

      parameters:
        - name: subscription_id
          in: path
          description: The subscription id
          required: true
          type: string

      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/PipeNotificationRuleInfo"

  /api/subscriptions/{subscription_id}/pipes/{pipe_id}/notification-rules:
    post:
      description:
        Add a new notification rule entry on the specified pipe
      operationId: api.notifications.add_notification_rule
      parameters:
        - name: subscription_id
          in: path
          description: The subscription id
          required: true
          type: string

        - name: pipe_id
          in: path
          description: The pipe id
          required: true
          type: string

        - in: body
          name: new_notification_rule_info
          description: Information about the new notification_rule
          required: true
          schema:
            $ref: "#/definitions/NewPipeNotificationRuleInfo"

      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/PipeNotificationRuleInfo"

    get:
      description:
        Returns a list of the notification rules on the specified pipe
      operationId: api.notifications.get_notification_rules

      parameters:
        - name: subscription_id
          in: path
          description: The subscription id
          required: true
          type: string

        - name: pipe_id
          in: path
          description: The pipe id
          required: true
          type: string

      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/PipeNotificationRuleInfo"


  /api/subscriptions/{subscription_id}/pipes/{pipe_id}/notification-rules/{notification_rule_id}:
    put:
      description:
        Updates the specified notification rule entry.
      operationId: api.notifications.update_notification_rule
      produces:
        - application/json
      parameters:
        - name: subscription_id
          in: path
          description: The subscription id
          required: true
          type: string

        - name: pipe_id
          in: path
          description: The pipe id
          required: true
          type: string

        - name: notification_rule_id
          in: path
          description: The notification_rule id
          required: true
          type: string

        - in: body
          name: updated_notification_rule_info
          description: Updated configuration for the notification_rule
          required: true
          schema:
            $ref: "#/definitions/UpdatedPipeNotificationRuleInfo"

      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/PipeNotificationRuleInfo"

    get:
      description:
        Gets the specified notification rule entry.
      operationId: api.notifications.get_notification_rule
      produces:
        - application/json
      parameters:
        - name: subscription_id
          in: path
          description: The subscription id
          required: true
          type: string

        - name: pipe_id
          in: path
          description: The pipe id
          required: true
          type: string

        - name: notification_rule_id
          in: path
          description: The notification_rule id
          required: true
          type: string

      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/PipeNotificationRuleInfo"

    delete:
      description:
        Deletes the specified notification rule entry.
      operationId: api.notifications.delete_notification_rule
      produces:
        - application/json
      parameters:
        - name: subscription_id
          in: path
          description: The subscription id
          required: true
          type: string

        - name: pipe_id
          in: path
          description: The pipe id
          required: true
          type: string

        - name: notification_rule_id
          in: path
          description: The notification_rule id
          required: true
          type: string

      responses:
        200:
          description: OK


  /api/subscriptions/{subscription_id}/pipes/{pipe_id}/notification-rules/{notification_rule_id}/notifications:
    get:
      operationId: api.notifications.get_notifications_for_notification_rule
      description:
        Returns the notifications that has been triggered by the specified notification rule.

      produces:
        - application/json

      parameters:
        - name: subscription_id
          in: path
          description: The subscription id
          required: true
          type: string

        - name: pipe_id
          in: path
          description: The pipe id
          required: true
          type: string

        - name: notification_rule_id
          in: path
          description: The notification_rule id
          required: true
          type: string

        - name: limit
          in: query
          description:
            Specifies the maximum number of notifications to return. If this is not specified, a reasonable
            default limit will still be used.
          required: false
          type: integer
          default: 1000

        - name: since
          in: query
          required: false
          type: string
          description:
            This can be set to a ISO 8601 datetime string to only return notifications that are more recent than the specified datetime.

        - name: include_dismissed
          in: query
          required: false
          type: boolean
          default: false
          description:
            Specified if dismissed notifications should be included in the results.

      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Notification'


  /api/notifications:
    get:
      operationId: api.profile.get_notifications_for_user
      description:
        Returns the notifications that should be displayed in the "Alerts"-list for this user.

      produces:
        - application/json

      parameters:
        - name: limit
          in: query
          description:
            Specifies the maximum number of notifications to return. If this is not specified, a reasonable
            default limit will still be used.
          required: false
          type: integer
          default: 1000

        - name: since
          in: query
          required: false
          type: string
          description:
            This can be set to a ISO 8601 datetime string to only return notifications that are more recent than the specified datetime.

        - name: include_dismissed
          in: query
          required: false
          type: boolean
          default: false
          description:
            Specifies if dismissed notifications should be included in the results.

      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Notification'

  /api/notifications-summary:
    get:
      operationId: api.profile.get_notifications_summary_for_user
      description:
        Returns the status of all subscriptions and pipes with notification-rules that the user have access to.
        This endpoint implements the Sesam "json-pull" protocol (https://docs.sesam.io/json-pull.html).

      produces:
        - application/json

      parameters:
        - name: limit
          in: query
          description:
            Specifies the maximum number of items to return. If this is not specified, all available items will
            be returned
          required: false
          type: integer

        - name: since
          in: query
          required: false
          type: integer
          description:
            This is the 'since'-value in the sesam json-pull protocol (https://docs.sesam.io/json-pull.html)

        - name: deleted
          in: query
          required: false
          type: boolean
          default: true
          description:
            Specifies if deleted entries should be included in the results.

      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              type: object
              additionalProperties: true
              required:
                - _id
                - _updated
                - _deleted
                - subscription_id
              properties:
                _id:
                  type: string
                  description:
                    The id of the pipe that this item represents

                subscription_id:
                  type: string
                  description:
                    The id of the subscription that this item belongs to

                pipe_id:
                  type: string
                  description:
                    The id of the pipe that this item represents. This property is optional and is only present if
                    the item represents a pipe.

                _updated:
                  type: number

                _deleted:
                  type: boolean

                status:
                  type: string
                  enum: ["ok", "failed"]
                  description:
                    If status is "ok" no notification-rules have triggered.
                    If status is "failed" if at least one user-defined notification-rule has triggered.
                    This property is not present in items where "_deleted" is true.

                confidence:
                  type: number
                  minimum: 0
                  maximum: 1
                  description:
                    This number specifies how confident the system is that the status is accurate. This is normally
                    1, which means that the notification machinery is working as normal.
                    If there is an internal problem with the notification machinery itself, the confidence will be
                    between 1 and 0.

                notifications:
                  type: array
                  description:
                    This property is only present if "status"=="failed" (i.e one or more notificationsrules have an
                    ongoing notification). It contains a list of detailed information about all ongoing notifications.
                  items:
                    $ref: '#/definitions/Notification'

  /api/monitoring/standard/{subscription_id}/pipes/{pipe_id}:
    get:
      operationId: api.monitoring_pipes.get_standard_pipe
      description:
        Returns standard monitoring information about the specified pipe
      produces:
        - application/json
      parameters:
        - name: subscription_id
          in: path
          description: The subscription id
          required: true
          type: string

        - name: pipe_id
          in: path
          description: The pipe id
          required: true
          type: string

      responses:
        200:
          description: OK


  /api/monitoring/standard/{subscription_id}:
    get:
      operationId: api.monitoring_subscription.get_standard_subscription
      description:
        Returns standard monitoring information about the specified subscription
      produces:
        - application/json
      parameters:
        - name: subscription_id
          in: path
          description: The subscription id
          required: true
          type: string

      responses:
        200:
          description: OK


  /api/monitoring/invoicing/{subscription_id}:
    get:
      operationId: api.monitoring_invoicing.get_invoice_information
      description:
        Returns invoicing information for the specified subscription
      produces:
        - application/json
      parameters:
        - name: subscription_id
          in: path
          description: The subscription id
          required: true
          type: string

      responses:
        200:
          description: OK

  /api/sso:
    get:
      description:
        Used for SSO authentication. If the portal detects that a user is in session, it creates a JWT and redirects to
        a provided URL. If not, it serves a login page to authenticate. Right now, this only works with Zendesk.
      parameters:
        - name: return_to
          in: query
          description: The URL to return to after authentication
          type: string
      responses:
        200:
          description: OK

  /api/login_implicit_flow:
    get:
      operationId: api.authentication.get_login_implicit_flow
      description:
        This is only used when logging in with openid connect providers that only support the "implicit flow" method.
        In that case the "id_token" is returned as part for the fragment-part of the url (the bit after the "#"-sign),
        which isn't sent to the backend. The login_implicit_flow page contains a javascript snippet that extracts the
        id_token and calls the jwt_login endpoint.
      produces:
        - text/html
      responses:
        200:
          description: OK

  /api/jwt_login:
    post:
      operationId: api.jwt_login.jwt_login_post
      description:
        This is only used when logging in with openid connect providers that only support the "implicit flow" method.
      responses:
        200:
          description: OK

  /api/login/{provider_id}:
    post:
      description:
        This starts an openid connect authentication prosess. The user will eventually be redirected back to the
        '/login_callback/{provider_id}' endpoint.
      operationId: api.authentication.login
      responses:
        302:
          description:
            A redirect to the authentication provider's login-page.

      parameters:
        - name: provider_id
          in: path
          description:
            The name of the openid connect authentication provider. This must match
            a provider that has been configured in the sesamportal.yaml file.
          required: true
          type: string

  /api/login_callback/{provider_id}:
    get:
      description:
        The user is redirected back here after authenticating with an
        openid connect authentication provider.
      operationId: api.authentication.login_callback
      responses:
        302:
          description:
            Redirect to the sesam portal frontpage

      parameters:
        - name: provider_id
          in: path
          description:
            The name of the openid connect authentication provider. This must match
            a provider that has been configured in the sesamportal.yaml file.
          required: true
          type: string

        - name: code
          in: query
          description:
            A short-lived authorization code from the authentication provider. The DAP backend will use this
            code to retrieve the user's information from the authentication provider.
          type: string

  /api/login:
    post:
      description:
        This is called when the user wants to authenticate with an email-address and a password. If the login
        is successful, a new http session is created, and the sessionid is returned in a cookie.
      consumes:
        - application/x-www-form-urlencoded
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - name: email
          in: formData
          description: The email address of the user
          required: true
          type: string
          allowEmptyValue: false

        - name: password
          in: formData
          description: The password of the user
          required: true
          type: string
          allowEmptyValue: false

        - name: g-recaptcha-response
          in: formData
          description: reCAPTCHA response
          required: false
          type: string
          allowEmptyValue: false

      responses:
        200:
          description: OK

  /api/logout:
    get:
      operationId: api.authentication.logout
      description:
        Logs out the currently logged-in user, and clears the http session data.
        This is the legacy logout that returns a json object (the same as the /api/profile
        endpoint). This endpoint is deprected and should be removed once the gui has been
        updated to use the "/api/logout2" endpoint.
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Profile'

  /api/logout2:
    get:
      operationId: api.authentication.logout2
      description:
        Logs out the currently logged-in user, and clears the http session data.
      responses:
        302:
          description:
            This redirect either to the sesam portal frontpage, or to a url that
            lets the user log out properly from a third party authentication provider.

  /api/signup:
    post:
      description:
        Signs up a new user
      responses:
        200:
          description: OK

      consumes:
        - application/x-www-form-urlencoded
        - multipart/form-data
      produces:
        - application/json

      parameters:
        - name: email
          in: formData
          description:
            The email address of the user. This must be globally unique.
          required: true
          type: string

        - name: password
          in: formData
          description: The password of the user
          required: true
          type: string

        - name: name
          in: formData
          description: The full name of the user.
          required: true
          type: string

        - name: g-recaptcha-response
          in: formData
          description: reCAPTCHA response
          required: false
          type: string
          allowEmptyValue: false


  '/api/available-subscription-settings':
    get:
      description:
        service for returning the various choices that exists for the various subscription settings
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: object
            additionalProperties: false
            required:
              - products
            properties:
              products:
                type: object
                additionalProperties: false
                required:
                  - datahub
                properties:
                  datahub:
                    type: object
                    additionalProperties: false
                    required:
                      - size
                    properties:
                      size:
                        type: array
                        items:
                          type: object
                          additionalProperties: false
                          required:
                            - size
                            - label
                            - maximum_store_disk_usage
                          properties:
                            size:
                              type: string
                              description:
                                The size-value of this option ("small", "medium", etc).
                            label:
                              type: string
                              description:
                                The label-text to use for this option
                            maximum_store_disk_usage:
                              type: integer
                              description:
                                The maximum number of bytes that the datahub's store is allowed to use on disk.

  '/api/estimate-subscription-price':
    post:
      description:
        service for calculating subscription price, based on a description of the select subscription options

      parameters:
        - in: body
          name: subscription_info
          description: The selected subscription options (or an existing (and possibly modified) subscription)
          required: true
          schema:
            $ref: "#/definitions/NewSubscriptionInfo"

        - name: expected_data_size
          in: query
          description: What is the expected data size of the subscription
          required: false
          type: integer
          minimum: 0

      produces:
        - application/json

      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/PriceEstimate"


  /api/subscriptions/{subscription_id}/estimate-subscription-price:
    post:
      operationId: api.estimate_subscription_price.estimate_subscription_price_for_existing_subscription
      description:
        service for calculating a new subscription price, based on a description of the select subscription options

      parameters:
        - name: subscription_id
          in: path
          description: The subscription id
          required: true
          type: string

        - name: expected_data_size
          in: query
          description: What is the expected data size of the subscription
          required: false
          type: integer
          minimum: 0

        - in: body
          name: subscription_info
          description: The selected subscription options
          required: true
          schema:
            $ref: "#/definitions/PriceEstimateSubscriptionInfo"

      produces:
        - application/json

      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/PriceEstimate"


  /api/is-available-subscription-name:
    post:
      description:
        This service checks that the specified subscription name is unique for specified "owner" and that is a valid name.

      consumes:
        - application/x-www-form-urlencoded
        - multipart/form-data

      produces:
        - application/json

      parameters:
        - name: subscription-name
          in: formData
          description:
            The subscription-name to test for uniqueness.
          required: true
          type: string

      responses:
        200:
          description: OK
          schema:
            type: object
            required:
              - is-available
            properties:
              is-available:
                type: boolean
                example: true


  /api/request_trial:
    post:
      operationId: api.subscriptions.request_trial
      description:
        This is called when a user wants to request a trial subscription.
      parameters:
        - name: user_submitted_information
          required: true
          in: body
          schema:
            $ref: "#/definitions/RequestTrialUserSubmittedInformation"

      responses:
        200:
          description: OK

  /api/cancel_request_trial:
    post:
      operationId: api.subscriptions.cancel_request_trial
      description:
        This is called when a user wants to cancel a previously made 'create trial' request.
      responses:
        200:
          description: OK

  /api/dismiss_denied_request_trial:
    post:
      operationId: api.subscriptions.dismiss_denied_request_trial
      description:
        This is called when a user wants to dismiss a denied 'create trial' request (so that the request
        doens't show up in the user's gui any longer).
      responses:
        200:
          description: OK



  /api/password:
    put:
      description:
        Changes the password of the user. This is called when a user is logged in, but wants to change their password.
      consumes:
        - application/x-www-form-urlencoded
        - multipart/form-data
      produces:
        - application/json

      parameters:
        - name: password
          in: formData
          description:
            The new password
          required: true
          type: string

      responses:
        200:
          description: OK
          schema:
            type: object
            required:
              - success
            properties:
              success:
                type: boolean
                example: true

  /api/forgot-password:
    post:
      description:
        Sends a mail to the specified emailaddress with a one-time link that lets the user change the password.
        The link leads to the normal gui with a url parameter that contains the "change-password" one-time token.
      consumes:
        - application/x-www-form-urlencoded
        - multipart/form-data
      produces:
        - application/json

      parameters:
        - name: email
          in: formData
          description:
            The email address of the user
          required: true
          type: string

        - name: g-recaptcha-response
          in: formData
          description: reCAPTCHA response
          required: false
          type: string
          allowEmptyValue: false

      responses:
        200:
          description: OK
          schema:
            type: object
            required:
              - success
            properties:
              success:
                type: boolean
                example: true

  /api/reset-password:
    post:
      description:
        changes the user's password. This is part of the "forgotten password" flow.
      consumes:
        - application/x-www-form-urlencoded
        - multipart/form-data
      parameters:
        - name: password
          in: formData
          description:
            The new password
          required: true
          type: string

        - name: token
          in: formData
          description:
            The one-time authorization token that was supplied in the "forgotten password" email.
          required: true
          type: string

      responses:
        200:
          description: OK
          schema:
            type: object
            required:
              - success
            properties:
              success:
                type: boolean
                example: true

  /api/verify-emailaddress:
    post:
      description:
        Verifies the user's email address. This is part of the "verify emailaddress" flow.
      consumes:
        - application/x-www-form-urlencoded
        - multipart/form-data
      parameters:
        - name: token
          in: formData
          description:
            The one-time authorization token that was supplied in the "verify emailaddress" email.
          required: true
          type: string

      responses:
        200:
          description: OK, address has been verified
        400:
          description:
            Token might be invalid, already used or expired


  /api/request-email-verification:
    post:
      description:
        Asks the portal to send a new 'Verify emailaddress' email.

      responses:
        200:
          description: OK, a new email has been sent

        409:
          description:
            The current user already has a pending 'verify emailaddress email', so no new email can
            be sent at this time.

  /api/payment/stripe_publishable_api_key:
    get:
      operationId: api.payment.get_stripe_publishable_api_key
      description:
        Returns the Stripe publishable api key.

      produces:
        - text/plain

      responses:
        200:
          description: OK

  /api/payment/stripe_coupon:
    post:
      operationId: api.payment.get_stripe_coupon
      description:
        Returns a coupon if it exists

      produces:
        - application/json

      parameters:
        - in: body
          name: body
          description: Information about the coupon
          required: true
          schema:
            $ref: '#/definitions/CouponInfo'

      responses:
        200:
          description: OK

  /api/sesam_status:
    get:
      description:
        Proxy for querying the sesam statuspage API

      produces:
        - application/json

      responses:
        200:
          description: OK
        404:
          description: Could not connect to sesam.statuspage.io


  /api/payment/subscription:
    post:
      operationId: api.payment.createSubscription
      description:
        Creates a new customer and subscription in Stripe and creates a PaymentMethod in the Sesam portal.
        Also creates a new gdpr subscription in the Sesam Portal (using the new paymentmethod).

      produces:
        - application/json

      parameters:
        - in: body
          name: token
          description: Token with card data
          required: true
          schema:
            $ref: '#/definitions/NewStripeSubscriptionInfo'

      responses:
        200:
          description: OK


  /api/paymentmethods:
    get:
      description:
        Returns the paymentmethods that this user owns.
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/PaymentMethod'

    post:
      description:
        Creates a new paymentmethod

      produces:
        - application/json

      parameters:
        - in: body
          name: body
          description: Settings for the new paymentmethod
          required: false
          schema:
            $ref: "#/definitions/NewPaymentMethodInfo"

      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/PaymentMethod'


  /api/paymentmethods/{paymentmethod_id}:
    get:
      operationId: api.paymentmethods.get_paymentmethod
      description:
        Returns information about the specified paymentmethod
      produces:
        - application/json
      parameters:
        - name: paymentmethod_id
          in: path
          description: The paymentmethod id
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/PaymentMethod'

    delete:
      operationId: api.paymentmethods.delete_paymentmethod
      description:
        Deletes the specified paymentmethod
      produces:
        - application/json
      parameters:
        - name: paymentmethod_id
          in: path
          description: The paymentmethod id
          required: true
          type: string
      responses:
        200:
          description: OK

    put:
      operationId: api.paymentmethods.put_paymentmethod
      description:
        Update the paymentmethod
      produces:
        - application/json

      parameters:
        - name: paymentmethod_id
          in: path
          description: The paymentmethod id
          required: true
          type: string

        - in: body
          name: updated_paymentmethod_info
          description: Updated settings for the paymentmethod
          required: true
          schema:
            $ref: "#/definitions/UpdatedPaymentMethodInfo"

      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/PaymentMethod'



  /api/admin:
    get:
      operationId: api.admin.frontpage.get
      produces:
        - text/html
      description:
        Returns a simple htmlpage that lets portal admin perform various operations. This should probably be
        replaces with a proper fancy page in the normal javascript GUI, but we want the functionality quickly,
        and only sesam employees will ever see it.
      responses:
        200:
          description: OK

    post:
      operationId: api.admin.frontpage.post
      consumes:
        - application/x-www-form-urlencoded
        - multipart/form-data
      produces:
        - text/html
      description:
        Handles POSTs for the various forms on the main admin-page.
      parameters:
        - in: formData
          name: operation
          description: The operation to perform
          required: true
          type: string

      responses:
        200:
          description: OK

  /api/admin/search:
    get:
      operationId: api.admin.search.get
      produces:
        - text/html
      description:
        Returns a simple htmlpage that lets admins search for subscriptions and perform various operations
        on them.

      parameters:
        - name: search_type
          in: query
          description:
            The type of items to search for.
          type: string
          enum: ["subscription", "paid_subscription",
                 "paid_subscription_without_verified_paymentmethod",
                 "user", "user_with_pending_trial_request", "user_with_any_trial_request",
                 "unverified_paymentmethod", "verified_paymentmethod"]

        - name: query
          in: query
          type: string
          description:
            Specifies the text to filter search for. An empty string means to display all the
            items of the selected type.

        - name: search_in_all_fields
          in: query
          type: boolean
          default: false
          description:
            If this is set to false (the default), the query-text will only be matched against
            a few selected fields (name and id, usually). If it is set to true, the query-text
            will be matched against all the fields.

      responses:
        200:
          description: OK

    post:
      operationId: api.admin.search.post
      produces:
        - text/html
      description:
        Handles POSTs for the various forms on the search-page.
      consumes:
        - application/x-www-form-urlencoded
        - multipart/form-data
      parameters:
        - in: formData
          name: operation
          description: The operation to perform
          required: true
          type: string
          enum: ["search",
                 "join_subscription",
                 "join_subscription_for_support",
                 "verify_paymentmethod",
                 "answer_create_trial_request",
                 "set_paymentmethod",
          ]

      responses:
        200:
          description: OK

  /api/admin/portal_administrators:
    get:
      operationId: api.admin.portal_administrators.get
      produces:
        - text/html
      description:
        Returns a simple htmlpage that display the current portal admins.
      responses:
        200:
          description: OK

    post:
      operationId: api.admin.portal_administrators.post
      consumes:
        - application/x-www-form-urlencoded
        - multipart/form-data
      produces:
        - text/html
      description:
        Handles POSTs for the various forms on the portal_admins-page.
      parameters:
        - in: formData
          name: operation
          description: The operation to perform
          required: true
          type: string

      responses:
        200:
          description: OK


  /api/admin/delete_user:
    get:
      operationId: api.admin.delete_user.get
      produces:
        - text/html
      description:
        Returns a simple htmlpage that lets the admin delete users
      responses:
        200:
          description: OK

    post:
      operationId: api.admin.delete_user.post
      consumes:
        - application/x-www-form-urlencoded
        - multipart/form-data
      produces:
        - text/html
      description:
        Handles POSTs for the various forms on the delete_user-page.
      parameters:
        - in: formData
          name: operation
          description: The operation to perform
          required: true
          type: string

      responses:
        200:
          description: OK

  /api/admin/throw_exception:
    post:
      operationId: api.admin.throw_exception.post
      consumes:
        - application/x-www-form-urlencoded
        - multipart/form-data
      produces:
        - application/json
      description:
        This is a test-endpoint for throwing various exceptions. This is used in ci-tests to verify that exceptions
        of various types are logged correctly.
      parameters:
        - in: formData
          name: exception_type
          description: The exception-type to throw
          required: true
          type: string
          enum: ["TypeError"]

      responses:
        200:
          description: OK

  /api/admin/config_gui:
    get:
      operationId: api.admin.config.get_config_gui
      description:
        Returns a gui for examining and modifying the portal configuration.
      produces:
        - text/html
      responses:
        200:
          description: OK

  /api/admin/pre_created_subscriptions:
    get:
      operationId: api.admin.config.get_pre_created_subscriptions_gui
      description:
        Returns a gui for examining and modifying the "pre-created subscriptions" settings.
      produces:
        - text/html
      responses:
        200:
          description: OK

  /api/admin/config:
    get:
      operationId: api.admin.config.get_config_entities
      description:
        Returns the current runtime configuration of the Portal. This is config that is intended to
        be modified at runtime (as opposed to stuff like database usernames and passwords, which is
        specified in the sesamportal.yaml file). See the definition of the ConfigEntity model and it's
        child models.
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/ConfigEntity'

    post:
      operationId: api.admin.config.add_config_entities
      description:
        Adds one or more new runtime configuration entries to the Portal.
      produces:
        - application/json
      parameters:
        - in: body
          name: config_entities
          schema:
            type: array
            items:
              $ref: '#/definitions/ConfigEntity'

      responses:
        200:
          description: OK

        409:
          description: One or more of the config entities already existed.

  /api/admin/config/validation_hack_for_SubscriptionJWT:
    put:
      operationId: api.subscription_api_jwts.validation_hack_for_SubscriptionJWT
      description:
        This is a dummy endpoint that is used to register the SubscriptionJWT definition,
        so that it can be used to validate configuration entities in the python code. The endpoint
        just returns a 400 response.
      produces:
        - application/json
      parameters:
        - in: body
          name: subscription_jwt
          schema:
            $ref: '#/definitions/SubscriptionJWT'

      responses:
        400:
          description: This endpoint will always return a 400 response

  /api/admin/config/validation_hack_for_AllowedProvidersForDomains:
    put:
      operationId: api.admin.config.validation_hack_for_AllowedProvidersForDomains
      description:
        This is a dummy endpoint that is used to register the AllowedProvidersForDomains definition,
        so that it can be used to validate configuration entities in the python code. The endpoint
        just returns a 400 response.
      produces:
        - application/json
      parameters:
        - in: body
          name: config_entity
          schema:
            $ref: '#/definitions/AllowedProvidersForDomains'

      responses:
        400:
          description: This endpoint will always return a 400 response

  /api/admin/config/validation_hack_for_AutoJoinSubscriptionGroup:
    put:
      operationId: api.admin.config.validation_hack_for_AutoJoinSubscriptionGroup
      description:
        This is a dummy endpoint that is used to register the AutoJoinSubscriptionGroup definition,
        so that it can be used to validate configuration entities in the python code. The endpoint
        just returns a 400 response.
      produces:
        - application/json
      parameters:
        - in: body
          name: config_entity
          schema:
            $ref: '#/definitions/AutoJoinSubscriptionGroup'

      responses:
        400:
          description: This endpoint will always return a 400 response

  /api/admin/config/validation_hack_for_PreCreatedSubscription:
    put:
      operationId: api.admin.config.validation_hack_for_PreCreatedSubscription
      description:
        This is a dummy endpoint that is used to register the PreCreatedSubscription definition,
        so that it can be used to validate configuration entities in the python code. The endpoint
        just returns a 400 response.
      produces:
        - application/json
      parameters:
        - in: body
          name: config_entity
          schema:
            $ref: '#/definitions/PreCreatedSubscription'

      responses:
        400:
          description: This endpoint will always return a 400 response

  /api/admin/config/validation_hack_for_RateLimits:
    put:
      operationId: api.admin.config.validation_hack_for_RateLimits
      description:
        This is a dummy endpoint that is used to register the RateLimits definition,
        so that it can be used to validate configuration entities in the python code. The endpoint
        just returns a 400 response.
      produces:
        - application/json
      parameters:
        - in: body
          name: config_entity
          schema:
            $ref: '#/definitions/RateLimits'

      responses:
        400:
          description: This endpoint will always return a 400 response

  /api/admin/config/{config_entity_id}:
    put:
      operationId: api.admin.config.update_config_entity
      description:
        Updates the specified configuration entry.
      produces:
        - application/json

      parameters:
        - name: config_entity_id
          in: path
          description: The config entity id
          required: true
          type: string
        - in: body
          name: config_entity
          schema:
            $ref: '#/definitions/ConfigEntity'

      responses:
        200:
          description: OK
        409:
          description: Someone else has modified the config entity.

    get:
      operationId: api.admin.config.get_config_entity
      description:
        Returns the specified configuration entry.
      parameters:
        - name: config_entity_id
          in: path
          description: The config entity id
          required: true
          type: string
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ConfigEntity'

    delete:
      operationId: api.admin.config.delete_config_entity
      description:
        Deletes the specified configuration entry.
      parameters:
        - name: config_entity_id
          in: path
          description: The config entity id
          required: true
          type: string
      produces:
        - application/json
      responses:
        200:
          description: OK


  /api/subscriptions/{subscription_id}/subscription-settings:
    get:
      operationId: api.subscriptions.get_subscription_settings
      description:
        This endpoint is intended to be used by subscription sesam-nodes; these nodes needs a way to get
        notified when a user has done something that changes a subscription's settings. For instance, this is
        used by the self-service multinode to retrieve the ip-filtering rules to use.
      produces:
        - application/json
      parameters:
        - name: subscription_id
          in: path
          description: The subscription id
          required: true
          type: string

        - name: since
          in: query
          description:
            Specifies that the endpoint should only return entities newer than the specified 'since' value.
            The since-value should be set to the value of the "_updated"-attribute in the last seen entity.
            See https://docs.sesam.io/configuration.html#continuation-support for details on how this works.
          required: false
          type: integer
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/SubscriptionSettings'

  /api/subscriptions/{subscription_id}/pipe-settings:
    get:
      operationId: api.pipe_settings.get_all_pipe_settings_for_subscription
      description:
        Returns a list of pipe-setting dicts.
        This endpoint is intended to be used by subscription sesam-nodes; these nodes needs a way to get
        notified when a user has done something that changes a pipe's monitoring requirements.
      produces:
        - application/json
      parameters:
        - name: subscription_id
          in: path
          description: The subscription id
          required: true
          type: string

        - name: since
          in: query
          description:
            Specifies that the endpoint should only return entities newer than the specified 'since' value.
            The since-value should be set to the value of the "_updated"-attribute in the last seen entity.
            See https://docs.sesam.io/configuration.html#continuation-support for details on how this works.
          required: false
          type: string
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/PipeSettings'


  /api/subscriptions/{subscription_id}/pipe-settings/{pipe_id}:
    put:
      operationId: api.pipe_settings.put_pipe_settings
      description:
        Update the settings of the specified pipe.
      produces:
        - application/json
      parameters:
        - name: subscription_id
          in: path
          description: The subscription id
          required: true
          type: string
        - name: pipe_id
          in: path
          description: The pipe id
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/UpdatedPipeSettings'

    get:
      operationId: api.pipe_settings.get_pipe_settings
      description:
        Returns the settings of the specified pipe.
      produces:
        - application/json
      parameters:
        - name: subscription_id
          in: path
          description: The subscription id
          required: true
          type: string
        - name: pipe_id
          in: path
          description: The pipe id
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/PipeSettings'

    delete:
      operationId: api.pipe_settings.delete_pipe_settings
      description:
        Deletes the settings of the specified pipe.
      produces:
        - application/json
      parameters:
        - name: subscription_id
          in: path
          description: The subscription id
          required: true
          type: string
        - name: pipe_id
          in: path
          description: The pipe id
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            type: object
            additionalProperties: false


  /api/subscriptions/{subscription_id}/revoked_json_web_tokens:
    get:
      operationId: api.subscription_api_jwts.get_revoked_json_web_tokens
      description:
        Returns a list of revoked json web tokens. Note that this includes both the transient JWTs that are
        issued by the unified GUI to talk to the node, and the special API JWTs that are typically very
        long-lived.
        This endpoint is intended to be used by subscription sesam-nodes; these nodes needs a way to get
        notified when a user's permissions have been modified, and when an api JWT has been revoked.
      produces:
        - application/json
      parameters:
        - name: subscription_id
          in: path
          description: The subscription id
          required: true
          type: string

        - name: since
          in: query
          description:
            Specifies that the endpoint should only return entities newer than the specified 'since' value.
            The since-value should be set to the value of the "_updated"-attribute in the last seen entity.
            See https://docs.sesam.io/configuration.html#continuation-support for details on how this works.
          required: false
          type: string
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/JWTRevocation'



  /api/subscriptions/{subscription_id}/updated_licences:
    get:
      operationId: api.subscriptions.get_updated_licenses
      description:
        Returns a list of updated licenses.
        This endpoint is intended to be used by subscription sesam-nodes; these nodes needs a way to get
        notified when a subscription's lisence has been upgraded.
      produces:
        - application/json
      parameters:
        - name: subscription_id
          in: path
          description: The subscription id
          required: true
          type: string

        - name: since
          in: query
          description:
            Specifies that the endpoint should only return entities newer than the specified 'since' value.
            The since-value should be set to the value of the "_updated"-attribute in the last seen entity.
            See https://docs.sesam.io/configuration.html#continuation-support for details on how this works.
          required: false
          type: string
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/LicenseEntity'


  /api/subscriptions/{subscription_id}/resource-needs:
    post:
      operationId: api.subscriptions.post_resource_needs
      description:
        This endpoint is intended to be used by subscription sesam-nodes; these nodes needs a way to specify
        that more hardware resources are required.
      produces:
        - application/json
      parameters:
        - name: subscription_id
          in: path
          description: The subscription id
          required: true
          type: string
        - in: body
          name: request_body
          description: The new resource-needs
          schema:
            type: object
            additionalProperties: false
            # TODO in IS-11207(step2): Set 'required:' and get rid of the 'datahub' property once the self-service operator has been updated.
            #required:
            #  - provisioning_settings
            properties:
              datahub:
                type: object
                additionalProperties: true
                description: This property is deprecated. Use 'provisioning_settings' instead.

              provisioning_settings:
                type: object
                additionalProperties: false
                required:
                  - num_workers
                properties:
                  num_workers:
                    type: integer
                    description:
                      Specifies that the number of worker boxes that this subscription needs.
      responses:
        200:
          description: OK

  /api/provisioning/domain:
    get:
      operationId: api.provisioning.is_domain_available
      description: Returns information about availability of a domain name.
      produces:
        - application/json
      parameters:
        - name: fqdn
          in: query
          required: true
          type: string
        - name: subscription_id
          in: query
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/DomainNameAvailability'

  /api/feedback:
    post:
      operationId: api.feedback.submit_feedback
      description:
        Submits feedback from the feedback form to Slack
      consumes:
        - application/json
      produces:
        - text/plain
      parameters:
        - in: body
          name: body
          description: The data that is to be sent to Slack
          required: true
          schema:
            $ref: '#/definitions/Feedback'
      responses:
        '200':
          description: OK

  /.well-known/openid-configuration:
    get:
      description:
        This endpoint returns the "OpenID Provider Configuration Response", as described at
        https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfigurationResponse
      operationId: api.openid_connect.get_configuration
      produces:
        - application/json
      responses:
        '200':
          description: OK

  /api/openid_connect/token:
    post:
      description:
        This is the "OpenID Connect Token endpoint", as described at
        https://tools.ietf.org/html/rfc6749#section-3.2
      operationId: api.openid_connect.token_endpoint_post
      consumes:
        - application/x-www-form-urlencoded
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - name: grant_type
          in: formData
          type: string
          enum: ["client_credentials", "refresh_token"]

        - name: client_id
          in: formData
          type: string

        - name: client_secret
          in: formData
          type: string

      responses:
        '200':
          description: OK

definitions:
  Feedback:
    type: object
    additionalProperties: false
    properties:
      message:
        type: string
        description: The message body of the feedback
      user_email:
        type: string
        description: The email of the sender
      path:
        type: string
        description: The path from where the feedback was submitted

  PaymentMethod:
    type: object
    additionalProperties: false
    required:
      - id
      - type
      - _updated
      - name
      - description
      - billing_info
      - is_verified
      - supported-operations
      - owner
    properties:
      id:
        $ref: "#/definitions/PaymentMethodId"
      type:
        $ref: "#/definitions/PaymentMethodType"
      _updated:
        $ref: "#/definitions/PaymentMethodUpdated"
      name:
        $ref: "#/definitions/PaymentMethodName"
      description:
        $ref: "#/definitions/PaymentMethodDescription"
      billing_info:
        $ref: "#/definitions/PaymentMethodBillingInfo"
      is_verified:
        $ref: "#/definitions/PaymentMethodIsVerified"
      audit:
        $ref: '#/definitions/AuditInfo'
      owner:
        $ref: "#/definitions/PaymentMethodOwner"

      supported-operations:
        description:
          Information about the various ui-actions that relates to this paymentmethod.
        type: object
        additionalProperties: false
        required:
          - modify_name_and_description
          - modify_billing_info
          - delete_paymentmethod
        properties:
          modify_name_and_description:
            allOf:
              - $ref: '#/definitions/SupportedOperation'
              - type: object
                properties:
                  reason-code:
                    type: string
                    enum: ["not_logged_in",
                           "user_doesnt_own_the_paymentmethod",
                           "email_not_verified",
                           "portal_is_in_readonly_mode"]

          modify_billing_info:
            allOf:
              - $ref: '#/definitions/SupportedOperation'
              - type: object
                properties:
                  reason-code:
                    type: string
                    enum: ["not_logged_in",
                           "user_doesnt_own_the_paymentmethod",
                           "paymentmethod_is_in_use",
                           "paymentmethod_is_credit_card",
                           "email_not_verified",
                           "portal_is_in_readonly_mode"]

          delete_paymentmethod:
            allOf:
              - $ref: '#/definitions/SupportedOperation'
              - type: object
                properties:
                  reason-code:
                    type: string
                    enum: ["not_logged_in",
                           "user_doesnt_own_the_paymentmethod",
                           "paymentmethod_is_in_use",
                           "email_not_verified",
                           "portal_is_in_readonly_mode"]

      subscriptions:
        description:
          The subscriptions that this paymentmethod is used for.
        type: array
        items:
          type: object
          additionalProperties: false
          required:
            - id
            - name
          properties:
            id:
              type: string
              description: The subscription id
              example: 6cdc28ae-77fd-4701-bb70-f041e7e45be1
            name:
              type: string
              description: The name of the the subscription
              example: My first paid subscription


  CouponInfo:
    type: object
    additionalProperties: false
    properties:
      code:
        type: string
        description: The coupon code

  NewStripeSubscriptionInfo:
    type: object
    additionalProperties: false
    properties:
      token:
        type: object
        description: The token object returned from Stripe
      email:
        type: string
        description: The email that the customer should be linked to
      phoneNumber:
        type: string
        description: The phone number of the customer
      vat:
        type: string
        description: The VAT of the company
      companyName:
        type: string
        description: The name of the company
      companyAddress:
        type: string
        description: The address of the company
      companyZipCode:
        type: string
        description: The zip code of the companys address
      companyCity:
        type: string
        description: The city the company resides in
      companyCountry:
        type: string
        description: The country the company resides in
      couponCode:
        type: string
        description: Optional coupon code


  NewPaymentMethodInfo:
    type: object
    additionalProperties: false
    properties:
      name:
        $ref: "#/definitions/PaymentMethodName"
      type:
        $ref: "#/definitions/PaymentMethodType"
      description:
        $ref: "#/definitions/PaymentMethodDescription"
      billing_info:
        $ref: "#/definitions/PaymentMethodBillingInfo"
      card_token:
        $ref: "#/definitions/PaymentMethodStripeCardToken"

  UpdatedPaymentMethodInfo:
    type: object
    additionalProperties: true
    properties:
      _updated:
        $ref: "#/definitions/PaymentMethodUpdated"
      name:
        $ref: "#/definitions/PaymentMethodName"
      description:
        $ref: "#/definitions/PaymentMethodDescription"
      billing_info:
        $ref: "#/definitions/PaymentMethodBillingInfo"

  PaymentMethodBillingInfo:
    type: object
    description:
      An json-structure that describes the billing info for the payment method. The client is currently
      free to store whatever it wants here (but it should be in reasonably structure; we will probably
      add some validation here later, once we have figured out which fields we need)

  PaymentMethodId:
    type: string
    description:
      The internal id of this paymentmethod.

  PaymentMethodType:
    description:
      The type of this paymentmethod.
    type: string
    enum: ["invoice", "card"]

  PaymentMethodUpdated:
    description:
      This is a version-value that is used to implement optimistic locking on the server. Note that this value can
      be of any type, so the client shouldn't make any assumptions about it.

  PaymentMethodName:
    type: string
    description:
      A humanreadable name of this paymentmethod. This is for the customers internal use.
    example:
      silver creditcard

  PaymentMethodDescription:
    type: string
    description:
      A humanreadable description of this paymentmethod. This is for the customers internal use.
    example:
      Payment using our companys silver creditcard. Ask for Bob if there is a problem.

  PaymentMethodIsVerified:
    type: boolean
    description:
      This is set to true when a Portal administrator (i.e a SESAM employee) has manually examined the
      payment information and checked that it is legitimate. Only portal administrators are allowed
      to change the value of this property.

  PaymentMethodStripeCardToken:
    type: string
    description:
      This is set for PaymentMethods that represents a Stripe credit card. This attribute is never sent
      to the client; it is only sent from the client to the server when the paymentmethod is created.

  PaymentMethodOwner:
    description:
      Information about the User that owns this paymentinfo
    type: object
    required:
      - user_id
      - name
      - email
    properties:
      user_id:
        description:
          The id of the owner
        type: string
        example: "a6f77946-3f91-4aff-be33-b4aef341b048"

      name:
        description:
          The name of the owner
        type: string
        example: "James Bond"

      email:
        description:
          The email of the owner
        type: string
        example: "james.bond@sis.gov.uk"

      picture:
        type: string
        example: "https://upload.wikimedia.org/wikipedia/en/3/3f/Captain_Phasma.jpg"

  PriceEstimate:
    type: object
    additionalProperties: false
    required:
      - currency
      - fixed_items
      - fixed_total
      - dynamic_items
    properties:
      currency:
        type: string
        enum: ["EUR"]

      fixed_items:
        type: object
        additionalProperties: false
        properties:
          datahub:
            $ref: '#/definitions/PriceEstimateFixedItem'
          microservices:
            $ref: '#/definitions/PriceEstimateFixedItem'
          sla:
            $ref: '#/definitions/PriceEstimateFixedItem'
          vpn:
            $ref: '#/definitions/PriceEstimateFixedItem'
          search:
            $ref: '#/definitions/PriceEstimateFixedItem'
      fixed_total:
        description:
          Transit-encoded decimal that specifies the total price for all the fixed items.
        type: string
        example: "~f19.90"

      dynamic_items:
        type: object
        additionalProperties: false
        properties:
          storage_pr_GB:
            $ref: '#/definitions/PriceEstimateDynamicItem'
          backup_pr_GB:
            $ref: '#/definitions/PriceEstimateDynamicItem'
          vpn_pr_GB:
            $ref: '#/definitions/PriceEstimateDynamicItem'
          sla_pr_GB:
            $ref: '#/definitions/PriceEstimateDynamicItem'
          search_pr_GB:
            $ref: '#/definitions/PriceEstimateDynamicItem'

          monitoring_pr_pipe_basic:
            $ref: '#/definitions/PriceEstimateDynamicItem'

          monitoring_pr_pipe_standard:
            $ref: '#/definitions/PriceEstimateDynamicItem'

          monitoring_pr_pipe_enterprise:
            $ref: '#/definitions/PriceEstimateDynamicItem'

      dynamic_total:
        description:
          Transit-encoded decimal that specifies the total price for all the dynamic items.
        type: string
        example: "~f19.90"

      expected_total_data_cost:
        description:
          Calculated total monthly cost of data (if the expected data size was provided, otherwise not present)
        type: string
        example: "~f19.90"


  PriceEstimateDynamicItem:
    type: object
    additionalProperties: false
    required:
      - price
    properties:
      price:
        description:
          Transit-encoded decimal that specifies the price of one unit of this item in
          the currency specified by the 'currency' property.
        type: string
        example: "~f19.90"


  PriceEstimateFixedItem:
    type: object
    additionalProperties: false
    required:
      - sub_type
      - price
    properties:
      sub_type:
        description:
          The 'main' type is given by the property-name used in the PriceEstimate to refer to this PriceEstimateFixedItem.
          The 'sub_type' specifies a more fine-grained type.
        type: string
        enum: [# datahub has the "sizes" "developer", "single", "multi". "small", "medium", "large" and "xlarge" are legacy
               "small", "medium", "large", "xlarge", "developer", "single", "multi",

               # microservices have "enterprise" instead of "xlarge"
               "enterprise",

               # SLA and Search has the sizes "basic", "standard" and "enterprise".
               "basic", "standard",

               # VPN doesn't have a subtype, and this is represented by an empty string.
               ""
               ]
      price:
        description:
          Transit-encoded decimal that specifies the price in the currency specified by the 'currency' property.
        type: string
        example: "~f19.90"


  Profile:
    type: object
    properties:
      userInfo:
        type: object
        properties:
          user_id:
            type: string
            example: auth0|5761543c6ed143f41a758881
          profile:
            type: object
            properties:
              nickname:
                type: string
                example: knut.johannessen
              email:
                type: string
                example: knut.johannessen@sesam.no
              email_is_verified:
                type: boolean
                example: False
              name:
                type: string
                example: Knut Johannessen
              picture:
                type: string
                example: https://s.gravatar.com/avatar/d0101a13dfbf2cb6c418676c4bd51074?s=480&r=pg&d=https%3A%2F%2Fcdn.auth0.com%2Favatars%2Fkn.png
          isLoggedIn:
            type: boolean
            example: True

          lastRequestTrial:
            $ref: '#/definitions/RequestTrial'
          providerWhitelist:
            type: array
            items:
              type: string
          providerIds:
            type: array
            items:
              type: string

      supported-operations:
        description:
          Information about the various ui-actions that relates to the user or the user's profile (as opposed
          to ui-actions that relates directly to a subscription).
        type: object
        additionalProperties: false
        required:
          - update_user_profile
          - create_subscription
          - create_trial_subscription
          - request_trial_subscription
          - request_email_verification
          - send_reset_password_email
          - create_paymentmethod
          - delete_account
          - activate_portal_admin_powers
        properties:
          update_user_profile:
            allOf:
              - $ref: '#/definitions/SupportedOperation'
              - type: object
                properties:
                  reason-code:
                    type: string
                    enum: ["not_logged_in", "email_not_verified",
                           "portal_is_in_readonly_mode"]

          create_subscription:
            allOf:
              - $ref: '#/definitions/SupportedOperation'
              - type: object
                properties:
                  reason-code:
                    type: string
                    enum: ["not_logged_in", "email_not_verified",
                           "portal_is_in_readonly_mode"]


          create_trial_subscription:
            allOf:
              - $ref: '#/definitions/SupportedOperation'
              - type: object
                properties:
                  reason-code:
                    type: string
                    enum: ["not_logged_in", "too_many_trial_subscriptions", "email_not_verified",
                           "user_is_not_portal_admin",
                           "portal_is_in_readonly_mode"]

          request_trial_subscription:
            allOf:
              - $ref: '#/definitions/SupportedOperation'
              - type: object
                properties:
                  reason-code:
                    type: string
                    enum: ["not_logged_in", "too_many_trial_subscriptions", "email_not_verified",
                           "has_pending_create_trial_request",
                           "portal_is_in_readonly_mode"]

          request_email_verification:
            allOf:
              - $ref: '#/definitions/SupportedOperation'
              - type: object
                properties:
                  reason-code:
                    type: string
                    enum: ["not_logged_in", "email_already_verified", "has_pending_verification_email",
                           "portal_is_in_readonly_mode"]

          send_reset_password_email:
            allOf:
              - $ref: '#/definitions/SupportedOperation'
              - type: object
                properties:
                  reason-code:
                    type: string
                    enum: ["no_such_user", "has_pending_reset_password_emails",
                           "portal_is_in_readonly_mode", "user_from_jwt"]

          create_paymentmethod:
            allOf:
              - $ref: '#/definitions/SupportedOperation'
              - type: object
                properties:
                  reason-code:
                    type: string
                    enum: ["not_logged_in", "email_not_verified",
                           "portal_is_in_readonly_mode"]

          delete_account:
            allOf:
              - $ref: '#/definitions/SupportedOperation'
              - type: object
                properties:
                  reason-code:
                    type: string
                    enum: ["not_logged_in", "is_last_admin", "is_paymentmethod_owner",
                           "portal_is_in_readonly_mode"]

          activate_portal_admin_powers:
            allOf:
              - $ref: '#/definitions/SupportedOperation'
              - type: object
                properties:
                  reason-code:
                    type: string
                    enum: ["not_logged_in", "user_is_not_portal_admin"]

  SupportedOperation:
    description:
      Represents a ui-operations that the user can potientially perform. If the user is allowed to perform the
      operations, the 'enabled'-property will be true. If the user is not allowed to do the operation, the
      'enabled'-property will be false, and the 'reason-code' property will explain why the operation is not allowed.
    type: object
    required:
      - enabled
      - id
      - name
    properties:
      enabled:
        type: boolean
        example: false
      id:
        type: string
        example: "create_subscription"
      name:
        type: string
        example: "Create subscription"
      reason-code:
        type: string
        example: "email_not_verified"
      reason-msg:
        type: string
        example: "You must verify your email address in order to create a subscription"


  Subscription:
    type: object
    additionalProperties: false
    required:
      - id
      - _updated
      - name
      - created
      - type
      - licenses
    properties:
      id:
        type: string
        example: "12345"
      _updated:
        $ref: '#/definitions/SubscriptionUpdated'
      name:
        type: string
        example: "3 month trial subscription"
      type:
        $ref: '#/definitions/SubscriptionType'
      created:
        type: string
        example: "2016-06-24T09:38:51Z"
      licenses:
        type: array
        items:
          $ref: '#/definitions/License'

      provisioning_status:
        type: string
        enum: ["pending", "completed", "provisioning", "failed", "destroyed"]

      is_unused_precreated_subscription:
        description: Specified if this is an unused precreated subscription. Such subscriptions are kept in
          reserve and assigned to people when they try to create a new subscription. This saves people
          from having to wait for a new box to be provisioned.
        type: boolean

      was_created_from_a_precreated_subscription:
        description: Specified if this subscription was create by assigning a precreated subscription.
        type: boolean

      provisioner_version:
        type: string
        description: Specifies the version of the sesam provisioner that's been used to provision
          this subscription. As of now that can either be "1", "2" or "snowflake"

      url:
        $ref: '#/definitions/SubscriptionURL'

      description:
        $ref: '#/definitions/SubscriptionDescription'

      provisioning_result:
        $ref: '#/definitions/ProvisioningResult'

      products:
        $ref: '#/definitions/Products'

      network:
        $ref: '#/definitions/NetworkSettings'

      connections:
        # The url(s) to the sesam-node of this subscription (mostly used for on-premise installations)
        $ref: '#/definitions/SubscriptionConnections'

      service:
        # Specifies if the subscription is about an in-cloud or on-premise installation.
        $ref: '#/definitions/SubscriptionService'

      paymentmethod_id:
        $ref: '#/definitions/SubscriptionPaymentMethodId'

      paymentmethod_info:
        $ref: '#/definitions/SubscriptionPaymentMethodInfo'

      current-users-member:
        allOf:
          - description: The member information for the currently logged in user
          - $ref: '#/definitions/SubscriptionMemberInfo'

      audit:
        $ref: '#/definitions/AuditInfo'

      supported-operations:
        description:
          Information about the various ui-actions that relates directly to this subscription.
        type: object
        additionalProperties: false
        required:
          - create_custom_role
          - assign_role_to_user
          - modify_subscription
          - delete_subscription
          - view_members
          - leave_subscription
          - invite_user
          - accept_invitation
          - decline_invitation
          - add_notification_rule
        properties:

          view_api_jwt_tokens:
            allOf:
              - $ref: '#/definitions/SupportedOperation'
              - type: object
                properties:
                  reason-code:
                    type: string
                    enum: ["user_is_not_admin",
                           "not_logged_in",
                           "user_does_not_have_required_permission",
                           "email_not_verified",
                           "portal_is_in_readonly_mode"]

          add_api_jwt_token:
            allOf:
              - $ref: '#/definitions/SupportedOperation'
              - type: object
                properties:
                  reason-code:
                    type: string
                    enum: ["user_is_not_admin",
                           "not_logged_in",
                            "user_does_not_have_required_permission",
                            "email_not_verified",
                            "portal_is_in_readonly_mode"]

          create_custom_role:
            allOf:
              - $ref: '#/definitions/SupportedOperation'
              - type: object
                properties:
                  reason-code:
                    type: string
                    enum: ["not_logged_in", "user_does_not_have_required_permission", "email_not_verified",
                           "portal_is_in_readonly_mode"]

          assign_role_to_user:
            allOf:
              - $ref: '#/definitions/SupportedOperation'
              - type: object
                properties:
                  reason-code:
                    type: string
                    enum: ["not_logged_in", "user_does_not_have_required_permission", "email_not_verified",
                           "portal_is_in_readonly_mode"]

          modify_subscription:
            allOf:
              - $ref: '#/definitions/SupportedOperation'
              - type: object
                properties:
                  reason-code:
                    type: string
                    enum: ["not_logged_in", "user_does_not_have_required_permission", "email_not_verified",
                           "portal_is_in_readonly_mode"]

          delete_subscription:
            allOf:
              - $ref: '#/definitions/SupportedOperation'
              - type: object
                properties:
                  reason-code:
                    type: string
                    enum: ["not_logged_in",
                           "user_from_jwt",
                           "user_does_not_have_required_permission",
                           "user_is_not_last_subscription_member",
                            "email_not_verified",
                           "portal_is_in_readonly_mode"]

          view_members:
            allOf:
              - $ref: '#/definitions/SupportedOperation'
              - type: object
                properties:
                  reason-code:
                    type: string
                    enum: ["not_logged_in", "user_does_not_have_required_permission"]

          leave_subscription:
            allOf:
              - $ref: '#/definitions/SupportedOperation'
              - type: object
                properties:
                  reason-code:
                    type: string
                    enum: ["is_last_admin", "is_paymentmethod_owner", "email_not_verified",
                           "portal_is_in_readonly_mode", "user_from_jwt"]

          invite_user:
            allOf:
              - $ref: '#/definitions/SupportedOperation'
              - type: object
                properties:
                  reason-code:
                    type: string
                    enum: ["not_logged_in", "user_does_not_have_required_permission", "email_not_verified",
                           "portal_is_in_readonly_mode"]

          accept_invitation:
            allOf:
              - $ref: '#/definitions/SupportedOperation'
              - type: object
                properties:
                  reason-code:
                    type: string
                    enum: ["no_invite", "email_not_verified",
                           "portal_is_in_readonly_mode"]

          decline_invitation:
            allOf:
              - $ref: '#/definitions/SupportedOperation'
              - type: object
                properties:
                  reason-code:
                    type: string
                    enum: ["no_invite", "already_declined", "email_not_verified",
                           "portal_is_in_readonly_mode"]

          add_notification_rule:
            allOf:
              - $ref: '#/definitions/SupportedOperation'
              - type: object
                properties:
                  reason-code:
                    type: string
                    enum: ["not_logged_in", "user_does_not_have_required_permission", "email_not_verified",
                           "portal_is_in_readonly_mode"]

          renew_license:
            allOf:
              - $ref: '#/definitions/SupportedOperation'
              - type: object
                properties:
                  reason-code:
                    type: string
                    enum: ["not_logged_in",
                           "user_does_not_have_required_permission",
                           "license_expiration_date_is_too_far_in_the_future",
                           "is_trial_subscription_and_user_is_not_portal_admin",
                           "email_not_verified",
                           "portal_is_in_readonly_mode"]

  SubscriptionSettings:
    description:
      This is the information about a subscription that can be downloaded by that subscription's sesam-node. It is
      a subset of the information in the "Subscription" type, plus some internal settings that are not exposed
      in the end-user api endpoints.

    type: object
    additionalProperties: false
    required:
      - _id
      - _updated
      - name
      - created
    properties:
      _id:
        type: string
        example: "12345"

      _updated:
        $ref: '#/definitions/SubscriptionUpdated'

      name:
        type: string
        example: "3 month trial subscription"

      type:
        $ref: '#/definitions/SubscriptionType'

      created:
        type: string
        example: "2016-06-24T09:38:51Z"

      url:
        $ref: '#/definitions/SubscriptionURL'

      description:
        $ref: '#/definitions/SubscriptionDescription'

      products:
        $ref: '#/definitions/Products'

      provisioning_settings:
        $ref: '#/definitions/ProvisioningSettings'

      network:
        $ref: '#/definitions/NetworkSettings'

      audit:
        $ref: '#/definitions/AuditInfo'

  ProvisioningResult:
    type: object
    description:
      This is a description of the current state of the provisioning for a subscription. This information is
      read-only; to modify the provisioning-settings, the corresponding settings in the "products"-property must
      be modified.
    additionalProperties: true
    properties:
      # TODO: will "microservices" appear here, too? And what about vpn?

      # TODO: add a short description to the various properties

      bootstrap:
        type: boolean

      msg:
        description:
          A list of errormessage (might be empty)
        type: array
        items:
          type: string

      network:
        type: object
        additionalProperties: true
        properties:
          acl:
            type: array
            items:
              $ref: '#/definitions/NetworkACLEntry'

          subnet:
            type: string
            example: "123.240.10.0/24"

          range:
            type: string
            example: "123.240.0.0/16"

          public-access:
            type: boolean

      datahub:
        type: object
        additionalProperties: false
        required:
          - public_ip
          - fqdn
          - private-ip
        properties:
          public_ip:
            type: string
            example: "123.123.123.123"
          fqdn:
            type: string
            example: "d0123467.sesam.cloud"
          private-ip:
            type: string
            example: "12.123.10.4"
          debuginfo:
            description:
              This property contains debug information that is only present in internal development environments.
          tag:
            type: string
            description:
              The docker image tag that the sesam-node container is currently using.
            example: "nightly"

      provisioning_settings:
        $ref: '#/definitions/ProvisioningSettings'

      services:
        type: object
        additionalProperties: false
        properties:
          databrowsers:
            type: array
            items:
              type: object
              additionalProperties: false

              required:
                - id
                - type
                - public_ip
                - fqdn
                - private-ip
              properties:
                id:
                  type: string
                  example: databrowser01
                type:
                  type: string
                  enum: ["databrowser"]
                public_ip:
                  type: string
                  example: "123.123.123.123"
                fqdn:
                  type: string
                  example: "databrowser01.d0123467.sesam.cloud"
                custom_fqdn:
                  description:
                    The user-defined url of this service.
                  type: array
                  items:
                    type: string
                    example: "gdpr.d0123467.sesam.cloud"
                private-ip:
                  type: string
                  example: "12.123.10.4"
                size:
                  type: string
                  example: "small"
                tag:
                  type: string
                  description:
                    The docker image tag for the data access portal container
                  example: "gdrp-nightly"
                debuginfo:
                  description:
                    This property contains debug information that is only present in internal development environments.

      dev_docker_container_info:
        type: object
        description:
          This property contains debug information that is only present in internal development environments.

  NetworkACLEntry:
    type: object
    additionalProperties: false
    required:
      - access
      - address
    properties:
      access:
        type: string
        enum: ["Allow", "Deny"]
      address:
        type: string
        example: "192.168.0.2"

  License:
    type: object
    required:
      - original
    properties:
      signed:
        description:
          The signed license key. This is only present for 'on-premise' subscriptions. For 'in-cloud' subscriptions
          the license-key is handled by the provisioner service and should never be shown to the customer.
        type: string
        example: "-----BEGIN SESAM LICENSE-----\neyJwYFkIjo..."

      original:
        $ref: '#/definitions/LicenseOriginalData'

      is-active-license:
        description:
          This is set to true if this is the currently active license. A subscription might have several licenses;
          each license has an expiration date, and each time the customer will renews the license, a new entry is added
          to the subscription's 'licenses' list.
        type: boolean


  LicenseOriginalData:
    type: object
    required:
      - _id
      - expires
      - email
      - created
    properties:
      _id:
        type: string
        example: "12345"
      expires:
        type: string
        example: "2017-09-24T00:00:00"
      email:
        type: string
        example: "knut.johannessen@sesam.no"
      created:
        type: string
        example: "2016-06-24T09:38:51"


  NewSubscriptionInfo:
    description:
      This is used when the client wants to create a new subscription.
    type: object
    additionalProperties: false
    properties:
      id:
        type: string

      name:
        type: string

      type:
        $ref: '#/definitions/SubscriptionType'

      url:
        $ref: '#/definitions/SubscriptionURL'

      description:
        $ref: '#/definitions/SubscriptionDescription'

      connections:
        # The url(s) to the sesam-node of this subscription (mostly used for on-premise installations)
        $ref: '#/definitions/SubscriptionConnections'

      service:
        # Specifies if the subscription is about in in-cloud or on-premise installation.
        $ref: '#/definitions/SubscriptionService'

      provisioner_version:
        $ref: '#/definitions/SubscriptionProvisionerVersion'

      products:
        # The products that should be included in this subscription.
        $ref: '#/definitions/Products'

      network:
        # Network settings for this subscription.
        $ref: '#/definitions/NetworkSettings'

      license-expiration-date:
        description:
          If this is specified it should be an ISO-8601 formatted datestring. This is used instead of the default
          value when setting the expiration date of the subscription license. The specified value cannot be in the past
          or too far in the future (a 400-response will be returned if the value is invalid).
        type: string

      paymentmethod_id:
        $ref: '#/definitions/SubscriptionPaymentMethodId'

  PriceEstimateSubscriptionInfo:
    type: object
    additionalProperties: true  # read-only attributes are ignored by the server

    properties:
      name:
        type: string

      url:
        $ref: '#/definitions/SubscriptionURL'

      description:
        $ref: '#/definitions/SubscriptionDescription'

      connections:
        # The url(s) to the sesam-node of this subscription (mostly used for on-premise installations)
        $ref: '#/definitions/SubscriptionConnections'

      # Note that it is not possible to modify the "service" attribute, since that would mean
      # moving an installation from the cloud to on-premise, or visa-versa.
      #service:
      #  # Specifies if the subscription is about in in-cloud or on-premise installation.
      #  $ref: '#/definitions/SubscriptionService'

      products:
        # The products that should be included in this subscription.
        $ref: '#/definitions/Products'

      network:
        # Network settings for this subscription.
        $ref: '#/definitions/NetworkSettings'

      paymentmethod_id:
        $ref: '#/definitions/SubscriptionPaymentMethodId'


  UpdatedSubscriptionInfo:
    type: object
    additionalProperties: true  # read-only attributes are ignored by the server

    required:
      - _updated
    properties:
      name:
        type: string

      _updated:
        $ref: '#/definitions/SubscriptionUpdated'

      url:
        $ref: '#/definitions/SubscriptionURL'

      description:
        $ref: '#/definitions/SubscriptionDescription'

      connections:
        # The url(s) to the sesam-node of this subscription (mostly used for on-premise installations)
        $ref: '#/definitions/SubscriptionConnections'

      # Note that it is not possible to modify the "service" attribute, since that would mean
      # moving an installation from the cloud to on-premise, or visa-versa.
      #service:
      #  # Specifies if the subscription is about in in-cloud or on-premise installation.
      #  $ref: '#/definitions/SubscriptionService'

      products:
        # The products that should be included in this subscription.
        $ref: '#/definitions/Products'

      network:
        # Network settings for this subscription.
        $ref: '#/definitions/NetworkSettings'

      paymentmethod_id:
        $ref: '#/definitions/SubscriptionPaymentMethodId'

  SubscriptionUpdated:
    description:
      This is a version-value that is used to implement optimistic locking on the server. Note that this value can
      be of any type, so the client shouldn't make any assumptions about it.

  SubscriptionPaymentMethodId:
    description:
      The id of the PaymentMethod that the licence-fee for this subscription should be billed to. This property
      is only present for subscriptions of the type "paid".
    type: string
    example: "a6f77946-3f91-4aff-be33-b4aef341b048"

  SubscriptionPaymentMethodInfo:
    description:
      Information of the PaymentMethod that the licence-fee for this subscription should be billed to. This property
      is only present for subscriptions of the type "paid". This info only includes information that it is safe to
      share with everyone (i.e. not things like creditcard numbers)
    type: object
    additionalProperties: false
    required:
      - id
      - type
      - name
      - description
      - is_verified
      - owner

    properties:
      id:
        $ref: '#/definitions/PaymentMethodId'
      type:
        $ref: '#/definitions/PaymentMethodType'
      name:
        $ref: '#/definitions/PaymentMethodName'
      description:
        $ref: '#/definitions/PaymentMethodDescription'
      is_verified:
        $ref: "#/definitions/PaymentMethodIsVerified"
      owner:
        $ref: "#/definitions/PaymentMethodOwner"

  SubscriptionProvisionerVersion:
    description:
      This specified the provisioner this subscription will be provisioned with. If this value is "1" or missing,
      and the service specified is "in-cloud", the original provisioner is used. If the value is "2",
      the new "sesam-provisioner" is used. If the version is "snowflake" the Portal won't provision this subscription.
    type: string
    enum:
      ["1", "2", "snowflake"]

  SubscriptionURL:
    description:
      An URL that points to a web-page that is related to the subscription somehow. This url just for human
      consumption, and would typically be used to point to the home-page of a project, or a wiki-page that
      describes what the sesam-installation does.
    type: string
    example: "https://wiki.example.com/our-fine-sesam-installation/home_page"

  SubscriptionType:
    description:
      This can be set to 'trial' in order to create a trial subscription. It is only legal to set this to true
       if the 'create_trial_subscription'-operation (from the 'supported-operations' from /api/profile) is
       enabled and all the various 'size' and 'level' settings on the subscription is at their minimum values.
    type: string
    default: "trial"
    enum: ["trial", "paid"]

  SubscriptionDescription:
    description:
      A short description of the subscription.
    type: string
    example: "This sesam-installation is used to connect apples and oranges."

  SubscriptionService:
    description:
      Specifies if the subscription is about in in-cloud or on-premise installation. This doesn't have bearing on
      whether the Portal provisions this subscription or not, that is controlled by the provisioner_version property
      as of IS-10634. All on-premise subscriptions have provisioner_version "snowflake" and some in-cloud ones too.
    type: string
    enum: ["in-cloud", "on-premise"]
    example: "in-cloud"

  SubscriptionConnections:
    description:
      The url(s) to the sesam-node(s) and other components of this subscription (mostly used for
      on-premise installations)
    type: array
    items:
      type: object
      additionalProperties: false
      required:
        - id
        - type
        - name
        - url
      properties:
        name:
          type: string
          description:
            The human-redable name of the connection.
          example: "Default"

        id:
          type: string
          description:
            The name "id" is a special case; it represents the default sesam-node connection.
            When the item's type is "databrowser", the id  refers to a databrowser in the "databrowser"-list
            in the "products"-part of the subscription info.
          example: "default"

        type:
          type: string
          description:
            This specified the type of component this connection points to.
          enum: ["sesam-node", "databrowser"]

        url:
          type: string
          example: "https://sesamnode2.internal.example.com"

  Products:
    description:
      Describes the products that has been selected for a subscription.
    type: object
    additionalProperties: false
    properties:
      datahub:
        type: object
        additionalProperties: false
        required:
          - size
        properties:
          size:
            description:
              This property describes the size of the node. As of Sep 2021, small, medium, large and xlarge are legacy
              sizes. The UI maps small/medium to single and xlarge to multi.
            type: string
            enum: ["small", "medium", "large", "xlarge", "developer", "single", "multi"]

          developer_mode:
            description:
              This is a property that is set in some subscriptions to allow certain APIs such as reset node that
              is dangerous to enable in a production environment
            type: boolean

          fixed_price_gb:
            description:
              This property specifies the number of GBs that are set as the threshold for the subscription fixed
              price payment scheme. If this property exists, subscription is invoiced using fixed price scheme.
            type: integer
            minimum: 0

          maximum_store_disk_usage:
            description:
              This is a read-only property that is set in some special cases where a custom server
              has been set up by sesam employees. It specifies the maximum size of the data store in bytes.
            type: integer

          backup:
            type: string
            default: "local-replicated"
            enum: ["local-replicated", "geo-replicated"]

          monitoring:
            type: string
            description:
              This can be set to "standard" to enable monitoring for this subscription (this currently requires
              some manual work by SESAM employees).
            enum: ["standard"]

          version:
            type: string
            description:
              The docker tag that the user wants the sesam-node container to use. The docker tag that is
              currently in use is specified in the "provisioning_result"->"datahub"->"tag" property. There will
              always be a delay between the time the user changes the "version"-property and the time when the
              "provisioning_result"->"datahub"->"tag" property changes; at the very least the sesam-node needs
              to be stopped and restarted with the new docker-image.

          byok:
            type: boolean
            default: false
            description:
              'Setting this to true enables the "Bring Your Own Keys" feature in Azure.
              See this page for some background on the BYOK feature:
                https://docs.microsoft.com/en-us/azure/information-protection/byok-price-restrictions
              Note that enabling this feature incurs additional costs.'

      gdpr_platform:
        description:
          This product specifies that this subscription represents a gdpr portal. This will
          make the box spin up a databrowser (with a solr and redis server) in addition to the
          sesam-node. It will also make the sesam-portal bootstrap the sesam-node with various
          gdpr-specific configuration.
        type: object
        additionalProperties: false
        required:
          - size
        properties:
          size:
            type: string
            enum: ["embedded",
                   # TODO: enable the other sizes once we implement support for multiple sizes of the
                   # gdpr_platform databrowser. Currenty, there is some hardcoding going on in the
                   # provisioner.
                   # "basic", "standard", "enterprise"
                   ]
          custom_fqdn:
            description:
              The user-defined url(s) of the databrowser for this gdpr platform.
            type: array
            items:
              type: string
              example: gdpr.d0123467.sesam.cloud

          name:
            description:
              An optional, humanreadable name for this gdpr platform.
            type: string

      databrowser:
        description:
          This is a list of the databrowsers. If you want a databrowser on the same box as the sesam-node, set
          the size to "embedded". Otherwise, the databrowser will be be spun up on its own separate box.
        type: array
        items:
          type: object
          additionalProperties: false
          required:
            - id
            #- size  If the "size" property is missing it means that the databrowser should run on the same
            #        todo: set size to required once the portal is updated with the latest portal docker image and
            #        we have set the size of all databrowsers correctly in the subscription dataset.
          properties:
            id:
              type: string
              example: "databrowser01"
              # The databrowser id is used to generate sub-domains on the form:
              #   <databrowser_id>-<subscription_id>.sesam.cloud
              minLength: 2

              # The maxLength is calucated like this:
              #   63 (max domain part length)
              # - 36 (the length of the subscription_id, which is an uuid)
              # -  1 (the hyphen between the databrowser_id and the subscription id)
              # = 26
              maxLength: 26
              pattern: "^[a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9]$"
            name:
              type: string
              example: "Databrowser 01"
            size:
              type: string
              enum: ["embedded", "basic", "standard", "enterprise"]
            type:
              description: "This is only set when the databrower is being used in a gdpr platform"
              type: string
              enum: ["gdpr"]
            custom_fqdn:
              description:
                The user-defined Fully Qualified Domain Names of this databrowser.
              type: array
              items:
                type: string
                example: gdpr.d0123467.sesam.cloud

      microservices:
        type: object
        additionalProperties: false
        required:
          - size
        properties:
          size:
            type: string
            enum: ["small", "medium", "large", "enterprise"]

      sla:
        description:
          The service-level agreement level.
        type: object
        additionalProperties: false
        required:
          - level
        properties:
          level:
            type: string
            enum: ["basic", "standard", "enterprise", "premium"]

      vpn:
        type: object
        additionalProperties: false
        properties:
          public-gateway:
            type: string
            example: "192.168.0.0"

          onsite-ranges:
            type: array
            items:
              type: string
              example: "192.168.0.0/24"

          local-range:
            type: string
            example: "192.168.0.*"

          local-subnet:
            type: string
            example: "192.168.0.0/24"

          type:
            type: string
            enum: ["route-based"]

          dns:
            type: array
            items:
              type: string
            example: ["192.168.0.2", "192.168.0.3"]

          enable_snat:
            type: boolean
            default: false

          tier:
            type: integer
            default: 1

          connections:
            type: array
            default: []
            items:
              $ref: '#/definitions/VPNConnection'

          sesam_gateway:
            type: string
            example: "18.10.0.11"

          sesam_address_spaces:
            type: array
            items:
              type: string
            example: ["210.10.8.3"]

      search:
        description:
          This controls whether to activate the search capability
        type: boolean
        default: false

  VPNConnection:
    description:
      Describes the customer settings for a VPN connection
    additionalProperties: false
    type: object
    properties:
      gateway_address:
        type: string
        example: "46.101.228.139"

      address_spaces:
        type: array
        items:
          type: string
        example: ["192.168.100.0/24"]

      shared_key:
        description:
          This is the secret shared key that is used to authenticate against the VPN. This property is write-only
          and will always look like "********" in the api-responses from the backend. If the special value
          "********" is used in a PUT-request, the value is ignored and the current shared_key value will not
          be changed. The intention is that the GUI can display and send the shared_key value as-is.
        type: string
        example: "verysecret"

      _id:
        description:
          This is an internal unique id that is assigned to new vpn-connections by the backend.
          The GUI will not display this value, but will include it as-is in PUT-requests.
          (The portal backend uses this value to replace the placeholder "********" for the shared_key
           property in PUT-requests; it needs a way to uniquely identify connections).
        type: integer
        example: 1


  ProvisioningSettings:
    description:
      Describes the internal (i.e not end-user configurable) subscription settings
    additionalProperties: true
    type: object
    properties:
      num_workers:
        description:
          The number of server machines this subscription currently uses.
        type: integer

      max_workers:
        description:
          The maximum number of server machines this subscription is allowed to use.
        type: integer

      kubernets_upgrade_channel:
        description:
          'The upgrade channel to use to auto-upgrade the kubernetes cluster. See
            https://docs.microsoft.com/en-us/azure/aks/upgrade-cluster#set-auto-upgrade-channel
          for a detailed explanation and for a list of available channels.'
        type: string
        example: "stable"

  NetworkSettings:
    description:
      Describes the network settings for a subscription.
    type: object
    additionalProperties: false
    properties:
      public-access:
        type: boolean

      network-acl:
        type: array
        items:
          type: object
          additionalProperties: false
          required:
            - access
            - address
          properties:
            access:
              type: string
              enum: ["Allow", "Deny"]
            address:
              type: string
              example: "192.168.0.2"


  InvitedUser:
    description:
      Information about the user to invite to the subscription.
    type: object
    additionalProperties: false
    properties:
      email:
        description: The email-address of the user to invite. This email address will also be the user's unique id.
        type: string
        example: "user.mcuserface@example.com"
      roles:
        description: A list of roles that the user will be assigned if they accepts the invitation.
        type: array
        items:
          type: string
          example: "group:Admin"


  UpdatedSubscriptionMemberInfo:
    description:
      Information about the new roles of a user
    type: object
    additionalProperties: true # Read-only attributes will be ignored on the server
    properties:
      _updated:
        description:
          This is a version-value that is used to implement optimistic locking on the server. The value should be
          the same as the value specified by the server in the SubscriptionMemberInfo object. Note that this value can
          be of any type, so the client shouldn't make any assumptions about it.

      roles:
        description: A list of roles that the user should have.
        type: array
        items:
          type: string
          example: "group:Admin"

  SubscriptionMemberInfo:
    description:
      Information about the roles of a user in a subscription
    type: object
    additionalProperties: false
    properties:
      _updated:
        description:
          This is a version-value that is used to implement optimistic locking on the server. The client can include
          this value when doing a PUT to the server; the server will then check that the current _updated value matches
          the value sent by the client. Note that this value can be of any type, so the client shouldn't make any
          assumptions about it.

      roles:
        description: A list of roles that the user has in the subscription.
        type: array
        items:
          type: string
          example: "group:Admin"

      audit:
        description:
          Auditing information about the membership of this user. This is only included when requested by a
          portal-admin user.
        type: object
        properties:
          invited_ts:
            type: string
            example: "2016-06-24T09:38:51Z"
          invited_by:
            type: object
            properties:
              email:
                type: string
                example: citestuser_1481228882.86_owner@sesam.io
              user_id:
                type: string
                example: "internal:citestuser_1481228882.86_owner@sesam.io"
              picture:
                type: string
                example: "https://upload.wikimedia.org/wikipedia/en/3/3f/Captain_Phasma.jpg"
              name:
                type: string
                example: "Joe Testuser"

      sesam_support_info:
        description:
          This attribute is only present if this membership represents a Sesam support employee temporarily
          joining the subscription.
        type: object
        required:
          - exp
        properties:
          exp:
            description:
              The "expiration" timestamp of this membership.
            type: string
            example: "2016-06-24T10:38:51Z"

          iat:
            description:
              The "issued at" timestamp of this membership.
            type: string
            example: "2016-06-24T09:38:51Z"

          reason:
            description:
              The reason the sesam-employee stated for joining the subscription.
            example:
              Looking into support-case SSD-100.

      user:
        description:
          Information about the user themself
        type: object
        properties:
          email:
            type: string
            example: "citestuser_1483603402.27_owner@sesam.io"
          name:
            type: string
            example: "Owner McOwnerface"
          picture:
            type: string
            example: "https://upload.wikimedia.org/wikipedia/en/7/76/Darth_Vader.jpg"
          user_id:
            type: string
            example: "citestuser_1483603402.27_owner@sesam.io"

  SubscriptionJWT:
    description:
      A JWT api token that has been created for one subscription
    type: object
    additionalProperties: False
    required:
      - id
      - name
      - description
      - payload
      - audit
      - supported-operations

    properties:
      id:
        description: The internal id of the token
        type: string
      name:
        description:
          A user-assigned name for this token.
        type: string
      description:
        description:
          A user-assigned description of this token.
        type: string

      supported-operations:
        description:
          Information about the various ui-actions that relates to this SubscriptionJWT
        type: object
        additionalProperties: false
        required:
          - delete_api_jwt_token
        properties:
          delete_api_jwt_token:
            allOf:
              - $ref: '#/definitions/SupportedOperation'
              - type: object
                properties:
                  reason-code:
                    type: string
                    enum: ["user_is_not_admin", "email_not_verified",
                           "portal_is_in_readonly_mode"]

      payload:
        description:
          The payload of the jwt, in cleartext
        type: object
        additionalProperties: false
        required:
          - api_token_id
          - iat
          - exp
          - user_id
          - user_profile
          - principals
        properties:
          api_token_id:
            description:
              The id of this JWT api token. We need a copy of the id in the payload, since the sesam-node needs
              to be able to retrieve it in order to check if the token has been invalidated.
            type: string

          iat:
            description:
              Standard "issued at" field. This is measured in the number of seconds since the Epoch.
            type: number
            example: 1485350743

          exp:
            description:
              Standard "expiration time" field.  This is measured in the number of seconds since the Epoch.
              Note that if the 'refresh_interval' parameter is set, this is not the "exp" value that will actually
              be in the jwt_string; instead the value will be "current_time + refresh_interval"
            type: number
            example: 2349343498

          user_id:
            type: string

          user_profile:
            type: object
            additionalProperties: false
            properties:
              email:
                type: string

              name:
                type: string

              picture:
                description: An URL pointing to an (avatar-)picture of the user
                type: string

          principals:
            type: object
            description:
              This is a mapping from subscriptionid to the list of principals for that subscription. The reason
              we have a mapping is that our JWTs can contain potentially contain permissions for more than one
              subscription. In this case there will alwasy be exactly one subscription_id in this mapping (i.e.
              for the subscription that this api jwt belongs to).

          user_principal:
            type: string
            description:
              This is the principal that normally represents the user itself. This is always set to 'group:Everyone'
              for api JWTs.
            enum: ["group:Everyone"]

      jwt_string:
        description: The actual signed JWT. For security-reasons this is only returned when the JWT is created.
        type: string

      client_id:
        description:
          Optional. The 'client_id' (if any) associated with this JWT. This is only present for tokens where the refresh_interval
          has been set.
        type: string

      client_secret:
        description:
          Optional.  The 'client_secret' (if any) associated with this JWT. For security-reasons this is only returned
          when the JWT is created. This is only present for tokens where the refresh_interval has been set.

        type: string

      refresh_interval:
        description:
          Optional. Specifies the interval (in seconds) at which the token must be refreshed.
        type: number
        example: 3600

      audit:
        $ref: '#/definitions/AuditInfo'



  RoleInfo:
    description:
      Information about a role. This could be a built-in role or a customrole that has been created for
      one specific subscription.
    type: object
    properties:
      name:
        description: A human readable name for the role. This is what the gui displays.
        type: string
        example: "group:Admin"
      description:
        description: A longer description of the role. The gui can use this for tooltips.
        type: string
        example: "Admins are always allowed to do *everything* and cannot be blocked by ACLs."
      id:
        description: The internal id of the role.
        type: string
        example: "group:Admin"
      child-roles:
        description: The ids of the child-roles of this role (this is always empty for build-in roles)
        type: array
        items:
          type: string
        example: ["group:Developer"]


  NewPipeNotificationRuleInfo:
    description:
      Information about a new notification_rule to add to a pipe.
    type: object
    additionalProperties: false
    required:
      - type
    properties:
      type:
        $ref: '#/definitions/NotificationRuleInfoType'
      id:
        $ref: '#/definitions/PipeNotificationRuleInfoId'
      name:
        $ref: '#/definitions/PipeNotificationRuleInfoName'
      description:
        $ref: '#/definitions/PipeNotificationRuleInfoDescription'
      recipients:
        $ref: '#/definitions/PipeNotificationRuleAlertRecipientList'
      extra_rule_info:
        $ref: '#/definitions/PipeNotificationRuleInfoExtraRuleInfo'

  UpdatedPipeNotificationRuleInfo:
    description:
      Information about an updated notification_rule.
    type: object
    additionalProperties: true  # read-only attributes are ignored by the server
    properties:
      name:
        $ref: '#/definitions/PipeNotificationRuleInfoName'
      description:
        $ref: '#/definitions/PipeNotificationRuleInfoDescription'
      recipients:
        $ref: '#/definitions/PipeNotificationRuleAlertRecipientList'
      extra_rule_info:
        $ref: '#/definitions/PipeNotificationRuleInfoExtraRuleInfo'

  PipeNotificationRuleInfo:
    description:
      Information about an notification_rule (as returned by the server).
    type: object
    additionalProperties: false
    required:
      - id
      - type
    properties:
      id:
        type: string
      type:
        $ref: '#/definitions/NotificationRuleInfoType'
      pipe_id:
        type: string
        description:
          This property is only present if the notification-rule
          belongs to one specific pipe
          (as opposed to belonging to the subscription itself).
      name:
        $ref: '#/definitions/PipeNotificationRuleInfoName'
      description:
        $ref: '#/definitions/PipeNotificationRuleInfoDescription'
      recipients:
        $ref: '#/definitions/PipeNotificationRuleAlertRecipientList'
      extra_rule_info:
        $ref: '#/definitions/PipeNotificationRuleInfoExtraRuleInfo'

  PipeNotificationRuleAlertRecipientList:
    description:
      The list of people that should be told about notifications that is triggered by the notification rule.
    type: array
    items:
      $ref: '#/definitions/PipeNotificationRuleAlertRecipient'

  PipeNotificationRuleAlertRecipient:
    description:
      Information about a recipient of a notification.
    type: object
    additionalProperties: false
    required:
      - id
      - methods
    properties:
      id:
        description:
         The id of this recipient. This can be a role-id (in which case every user with this roleid gets
         notified), a user-id, or a plain email address. The 'type' property specifies how the 'id' should
         be interpreted.
        example: "group:Admin"
      type:
        description:
          Specifies what the 'id' property refers to.
        type: string
        enum: ["role", "user_id", "email"]

      methods:
        description: The delivery-method(s) to use for this recipient
        type: array
        items:
          type: string
          enum: ["portal", # an alert is displayed in the portal gui
                 "email", # an email is sent to the recipient (the alert is also displayed in the portal gui)
                 ] # This may be expanded later, for instance with "sms" and "irc".


  NotificationRuleInfoType:
    description:
      The type of the notification_rule
    type: string
    enum: ["pump_started_overdue",
           "pump_finished_overdue",
           "pump_completed_value_too_high_over_time",
           "pump_completed_value_too_low_over_time",
           "pump_completed_value_too_high",
           "pump_completed_value_too_low",
           "pattern_match",
           "pump_failed",
           "pump_offset_set",
           "restore_completed",
           "license_expiration_date",
           "store_disk_usage_upper_limit"
           ]

  PipeNotificationRuleInfoId:
    description:
      The internal id of the notification_rule. It this is not assigned by the user, it will be set to
      a unique value by the server.
    type: string

  PipeNotificationRuleInfoName:
    description:
      A short user-defined name for the notification_rule.
    type: string

  PipeNotificationRuleInfoDescription:
    description:
      A user-defined description of the notification_rule. This can be used for instance to explain what steps
      should be taken if the notification_rule is triggered.
    type: string

  PipeNotificationRuleInfoExtraRuleInfo:
    description:
      Any extra rule-specific information. For some rules the rule "type" is enough information, but some rules
      requires additional information (for instance min- and max- values for some metric). This information
      is specified by adding attributes to this object as needed.
    type: object

  PipeNotificationRuleTypeInfo:
    description:
      Information about an notification_rule type.
    type: object
    additionalProperties: false
    required:
      - name
      - description
      - type
      - schema
    properties:
      type:
        $ref: '#/definitions/NotificationRuleInfoType'
      name:
        type: string
        description: The human-readable name of the rule-type
      description:
        type: string
        description: A description of the rule-type
      schema:
        description:
          A JSON Schema that describes which extra parameters (if any) this rule requires.
          When the portal backend receives a request on the
          '/api/subscriptions/{subscription_id}/pipes/{pipe_id}/notification-rules' endpoint,
          this schema is used to validate the request's json payload.
        type: object

  AuditInfo:
    description:
      Auditing information about an entity.

    type: object
    properties:
      created_ts:
        type: string
        example: "2016-06-24T09:38:51Z"
      created_by:
        type: object
        properties:
          email:
            type: string
            example: citestuser_1481228882.86_owner@sesam.io
          user_id:
            type: string
            example: "internal:citestuser_1481228882.86_owner@sesam.io"
          picture:
            type: string
            example: "https://upload.wikimedia.org/wikipedia/en/3/3f/Captain_Phasma.jpg"
          name:
            type: string
            example: "Joe Testuser"
      last_modified_ts:
        type: string
        example: "2016-06-24T12:11:15Z"
      last_modified_by:
        type: object
        properties:
          email:
            type: string
            example: citestuser_1481228882.86_owner@sesam.io
          user_id:
            type: string
            example: "internal:citestuser_1481228882.86_owner@sesam.io"
          picture:
            type: string
            example: "https://upload.wikimedia.org/wikipedia/en/3/3f/Captain_Phasma.jpg"
          name:
            type: string
            example: "Joe Testuser"

  RequestTrial:
    type: object
    additionalProperties: false
    description:
      Information about the last 'Request trial subscription' request the user has made. If the user hasn't
      requested a trial subscription, this property will not be present.
    properties:
      created_time:
        description:
          The time when the user made the request, as a ISO 8601 formatted string.
        type: string
        example: '2017-06-03T10:54:55.661646Z'
      user_submitted_information:
        $ref: '#/definitions/RequestTrialUserSubmittedInformation'
      status:
        description:
          The result of the request.
        type: string
        enum: ["pending", "denied", "granted"]
      response:
        description:
          A text describing the reason behind the result (typically used to explain why the request
          was denied.
        type: string
      responded_time:
        description:
          The time when the request was answered, as a ISO 8601 formatted string.
        type: string
        example: '2017-06-04T10:11:55.123432Z'
      dismissed_from_gui:
        description:
          This can be set to true to hide a denied request from the user's gui.
        type: boolean

  RequestTrialUserSubmittedInformation:
    description:
      The information the user submits when requesting information. This information is diplayed to the
      sesam employee that reviews the "create trial" request. The exact properties that are present is decided
      by the GUI; both the backend storage and the admin form the sesam employee uses can handle any number
      and types of properties.
    type: object
    additionalProperties: true

  Notification:
    description:
      A notification about some event or condition that one or more users wants to be told about.
    type: object
    additionalProperties: false
    required:
      - event_timestamp
      - notification_id
      - msg
      - notification_rule_id
      - notification_rule_type
      - notification_rule_name
      - last_event_timestamp
      - event_count
      - alerts_will_be_visible_for_the_current_user
      - is_ongoing

    properties:
      event_timestamp:
        type: string
        example: "2016-06-24T09:38:51Z"

      notification_id:
        description:
          An integer that uniquely identifies this notification.
        type: integer
        example: 123123

      msg:
        type: string
        description:
          A human-readable message describing the notification.

      extra_notification_info:
        description:
          This is a json-object with additional notification-ruletype specific information
          about the notification.
        type: object

      notification_rule_id:
          description:
            The id of the notification rule that triggered this notification.
          type: string

      notification_rule_type:
          description:
            The type of the notification rule that triggered this notification.
          type: string

      notification_rule_name:
          description:
            The name of the notification rule that triggered this notification.
          type: string

      subscription_id:
          description:
            The id of the subscription that this notification belongs to (if any). If the notification
            doesn't belong to a subscription, this property will not be present.
          type: string

      pipe_id:
          description:
            The id of the pipe that this notification belongs to (if any). If the notification
            doesn't belong to a pipe, this property will not be present.
          type: string

      event_count:
        description:
          The number of instances of the notification-rule triggering that this notification represents.
          To prevent a rough notification-rule from creating thousands of identical notifications, the number
          of notifications that can be created within a certain time-span is limited. But we still need to
          keep track of the total number of times the notification-rule has triggered, so we increment this
          value as needed.
        type: integer
        example: 1

      last_event_timestamp:
        description:
          The timestamp of the last notification-rule triggering that this notification represents. See the
          also the 'event_count' property.
        type: string
        example: "2016-06-24T09:38:51Z"

      is_ongoing:
        description:
          This is true if the notification is still "ongoing", meaning that the condition that caused the notification
          to trigger hasn't since been resolved.
        type: boolean

      alerts_will_be_visible_for_the_current_user:
        type: boolean
        description:
          This is true if this notification should generate an alert for the user. This can be false if
          the user is looking at one specific notification-rule in the GUI; in that case we want do
          display all notifications, including the ones that won't trigger alerts for the current user.

  ConfigEntity:
    type: object
    description:
      This is the 'abstract' baseclass for the various ConfigEntity variants.
    required:
      - _id
      - type
    properties:
      _id:
        type: string
      type:
        type: string
        enum: ["auto-join-subscription-group",
               "pre-created-subscription",
               "rate-limits",
               "allowed-providers-for-domains"
               ]

# TODO: start using this directly in the swagger-file once connexion is updated to support openapi v3.0
  #       (so that we can use "oneOf" in the swagger files.
  #       The definition is currently used to do a manual check in the python-code.
  AllowedProvidersForDomains:
    allOf:
      - $ref: '#/definitions/ConfigEntity'
      - type: object
        additionalProperties: false
        required:
          - _id
          - type
          - mapping
        properties:
          _id:
            type: string
          type:
            type: string
            enum: ["allowed-providers-for-domains"]
          mapping:
            description: Mapping between domains and allowed providers
            type: object


  # TODO: start using this directly in the swagger-file once connexion is updated to support openapi v3.0
  #       (so that we can use "oneOf" in the swagger files.
  #       The definition is currently used to do a manual check in the python-code.
  PreCreatedSubscription:
    allOf:
      - $ref: '#/definitions/ConfigEntity'
      - type: object
        additionalProperties: false
        required:
          - _id
          - type
          - subscription_config
          - pre_create_count
        properties:
          _id:
            type: string
          type:
            type: string
            enum: ["pre-created-subscription"]

          subscription_config:
            description: The subscription config to use for the pre-allocated instances
            allOf:
              - $ref: "#/definitions/NewSubscriptionInfo"
              # We want to make "type" a required property, too. It is optional in the NewSubscriptionInfo definition.
              # We want to make sure "service" is a required property, and that it is set to "in-cloud".
              - type: object
                required:
                  - type
                  - service
                properties:
                  type:
                    type: string
                  service:
                    type: string
                    enum: ["in-cloud"]

          pre_create_count:
            description: The number of pre-allocated subscription to keep around
            type: integer
            minimum: 0
            # We shouldn't make this any larger than required; it costs us money to have
            # idle azure boxes standing by, and we could be quicly bankrupepted if someone
            # created 10000 pre-created subscriptions by mistake.
            maximum: 40


  # TODO: start using this directly in the swagger-file once connexion is updated to support openapi v3.0
  #       (so that we can use "oneOf" in the swagger files.
  #       The definition is currently used to do a manual check in the python-code.
  RateLimits:
    allOf:
      - $ref: '#/definitions/ConfigEntity'
      - type: object
        additionalProperties: false
        required:
          - _id
          - type
          - max_new_subscriptions_per_hour
          - max_new_subscriptions_per_day
        properties:
          _id:
            type: string
            # There should only be one of this configentity-type, so only this one id is allowed.
            enum: ["rate-limits"]
          type:
            type: string
            enum: ["rate-limits"]

          max_new_subscriptions_per_hour:
            description:
              Specifies the maximum number of subscriptions that can be created per hour.
            type: integer
            minimum: 0

          max_new_subscriptions_per_day:
            description:
              Specifies the maximum number of subscriptions that can be created per day.
            type: integer
            minimum: 0


  # TODO: start using this directly in the swagger-file once connexion is updated to support openapi v3.0
  #       (so that we can use "oneOf" in the swagger files.
  #       The definition is currently used to do a manual check in the python-code.
  AutoJoinSubscriptionGroup:
    allOf:
      - $ref: '#/definitions/ConfigEntity'
      - type: object
        additionalProperties: false
        required:
          - _id
          - type
          - load_strategy
          - subscriptions
        properties:
          _id:
            type: string
          type:
            type: string
            enum: ["auto-join-subscription-group"]
          load_strategy:
            description:
              Specifies how to distribute new users to the subscriptions.
              'fill-up-each-subscription-in-order' means to start at the top of the subscriptions list and fill up
              each subscription before adding any users to the next subscription.
              'balance' means to add each new user to the subscription with the fewest members.
            type: string
            enum: ["fill-up-each-subscription-in-order",
                   "balance"]
          subscriptions:
            type: array
            items:
              type: object
              additionalProperties: false
              required:
                - subscription_id
                - max_number_of_members
              properties:
                subscription_id:
                  type: string
                  example: "269661c9-ae3f-4660-88d0-129bc8c18c16"

                max_number_of_members:
                  description:
                    The maximum number of members this subscription can have before the portal should stop
                    automatically adding members to it.
                  type: integer
                  example: 10

                roles:
                  description:
                    The roles to assign to the user for this subscription.
                  type: array
                  items:
                    type: string
                  example: ["group:User"]


  PipeSettings:
    description:
      This is the values that are returned by the sesam-portal in the "pipe-settings" endpoint.
    type: object
    additionalProperties: false
    required:
      - _id
      - insights_enabled
    properties:
      _id:
        type: string
        description:
          This is the id of the pipe that this entry describes.

      _updated:
        description:
          An opaque value that can be used as the value of the "since" parameter in a later call.

      _deleted:
        type: boolean
        description:
          This is set to true if the entry for the pipe has once existed, but should now be removed.

      insights_enabled:
        $ref: '#/definitions/PipeSettingsInsightsEnabled'

      monitoring_settings:
        type: object
        additionalProperties: false
        required:
          - log_events
        properties:
          log_events:
            description:
              The execution log event-types that should be written for this pipe.
            type: object
            additionalProperties: false
            properties:
              "pump-started":
                $ref: '#/definitions/PipeSettingsLogEvent'
              "pump-completed":
                $ref: '#/definitions/PipeSettingsLogEvent'
              "read-error":
                $ref: '#/definitions/PipeSettingsLogEvent'
              "write-error":
                $ref: '#/definitions/PipeSettingsLogEvent'
              "batch-write-error":
                $ref: '#/definitions/PipeSettingsLogEvent'
              "pump-failed":
                $ref: '#/definitions/PipeSettingsLogEvent'

  UpdatedPipeSettings:
    description:
      This is the message that the gui sends when it wants to update the settings of a pipe.
    type: object
    additionalProperties: true # any additional properties are ignored.
    properties:
      _updated:
        description:
          This is required for optimistic locking and should be included if there already existed a
          pipe-settings entry for the pipe.
      insights_enabled:
        $ref: '#/definitions/PipeSettingsInsightsEnabled'

  PipeSettingsInsightsEnabled:
    type: boolean
    description:
      Specifies if the "Insights"-tab should be displayed for this pipe.

  PipeSettingsLogEvent:
    type: object
    required:
      - triggers
    properties:
      triggers:
        description:
          A list of conditions that should cause the event to be logged. The event will be logged if at
          least one of the conditions in the list is met.
        type: array
        items:
          type: string
          enum: [
            "always",              # Unconditionally log the event
            "entities_last_run",   # At least one entity was read from the source
            "changes_last_run",    # At least one entity was written to the sink
            "errors"               # An error occured
          ]



  JWTRevocation:
    type: object
    additionalProperties: false
    required:
      - revoked_ts
      - revoked_by
      - _updated
      - _id
      - subscription_id
    properties:
      _updated:
        description:
          An opaque value that can be used as the value of the "since" parameter in a later call.

      _id:
        type: string

      subscription_id:
        description: The subscription this revocation applies to.
        type: string

      revoked_ts:
        description:
          The time this revocation happened.
        type: string
        example: "2016-06-24T09:38:51Z"

      revoked_by:
        description:
          Information about the user that caused the revocation.
        type: object
        properties:
          email:
            type: string
            example: citestuser_1481228882.86_owner@sesam.io
          user_id:
            type: string
            example: "internal:citestuser_1481228882.86_owner@sesam.io"
          picture:
            type: string
            example: "https://upload.wikimedia.org/wikipedia/en/3/3f/Captain_Phasma.jpg"
          name:
            type: string
            example: "Joe Testuser"

      user_principal:
        type: string
        example: email:citestuser_1485454844.60@sesam.io
        description:
          The user_principal to invalidate regular (non-api) JWTs for. This tells the subscription-node that
          all JWTs for the specified user_principal that has been created before the revoked_by time are
          invalid.
          This property is mutually exclusive with the 'api_token_id' parameter, each entity will have either
          a 'user_principal' parameter or a 'api_token_id' parameter, but never both.

      api_token_id:
        type: string
        example: eadd5c09-fc55-4d02-9acc-ad51d4e2c29d
        description:
          The id of the API JWT to invalidate. This refers directly to one specific API JWT.
          This property is mutually exclusive with the 'user_principal' parameter, each entity will have either
          a 'user_principal' parameter or a 'api_token_id' parameter, but never both.


  LicenseEntity:
    type: object
    additionalProperties: false
    required:
      - signed
      - _updated
      - _id
      - _deleted
    properties:
      signed:
        description:
          The signed license key. This is only present for 'on-premise' subscriptions. For 'in-cloud' subscriptions
          the license-key is handled by the provisioner service and should never be shown to the customer.
        type: string
        example: "-----BEGIN SESAM LICENSE-----\neyJwYFkIjo..."

      _updated:
        description:
          An opaque value that can be used as the value of the "since" parameter in a later call.

      _deleted:
        type: boolean
        description:
          true if this lisence is obsolete.

      _id:
        type: string

  DomainNameAvailability:
    description: Decribes the current availability of a domain name.
    type: object
    additionalProperties: true
    required:
      - fqdn
      - available
    properties:
      fqdn:
        type: string
        example: subdomain.example.com
      available:
        type: boolean
      type:
        enum:
          - A
          - ALIAS
          - CNAME
          - MX
          - SPF
          - URL
          - TXT
          - NS
          - SRV
          - NAPTR
          - PTR
          - AAAA
          - SSHFP
          - HINFO
          - POOL
          - CAA
      content:
        type: string
      ttl:
        type: integer
      message:
        type: string
