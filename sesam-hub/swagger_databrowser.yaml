
swagger: '2.0'
info:
  version: 0.0.0
  title: SESAM Data access portal api endpoints.
  description: These endpoints are only for internal use and can be changed or removed at any time.

paths:
  /:
    get:
      operationId: index.index
      description:
        Generates the html page that contains the data access portal application. This is the only end-user
        facing html page; all other interaction is done via client-side javascript and AJAX calls.
      produces:
        - text/html
      parameters:
        # common parameters
        - $ref: '#/parameters/q'
        - $ref: '#/parameters/start'
        - $ref: '#/parameters/end'
        - $ref: '#/parameters/selected'
        - $ref: '#/parameters/location'

        # index.html parameters
        - $ref: '#/parameters/focus'
        - $ref: '#/parameters/edit'

        # TODO: document these obscure parameters.
        #- $ref: '#/parameters/graph'
        #- $ref: '#/parameters/detailgraph'
        #- $ref: '#/parameters/rendervalue'
        #- $ref: '#/parameters/collapsed'
        #- $ref: '#/parameters/boost'
        #- $ref: '#/parameters/showdebugcontrols'
        #- $ref: '#/parameters/itemdetailsrenderer'

      responses:
        200:
          description: OK
    post:
      operationId: index.post_data
      description:
        A POST request to the base url in a browser context (an HTML form POST action) will redirect the browser to the databrowser. After user authentication
        the databrowser will automatically send an access request on behalf of the user.
      produces:
        - text/html
      consumes:
        - application/x-www-form-urlencoded

      responses:
        200:
          description: OK


  /login_implicit_flow:
    get:
      operationId: authentication.get_login_implicit_flow
      description:
        This is only used when logging in with openid connect providers that only support the "implicit flow" method.
        In that case the "id_token" is returned as part for the fragment-part of the url (the bit after the "#"-sign),
        which isn't sent to the backend. The login_implicit_flow page contains a javascript snippet that extracts the
        id_token and calls the jwt_login endpoint.
      produces:
        - text/html
      responses:
        200:
          description: OK

  /jwt_login:
    get:
      operationId: jwt_login.jwt_login_get
      description:
        This is an internal page that is only used for development and testing.
      responses:
        200:
          description: OK
    post:
      operationId: jwt_login.jwt_login_post
      description:
        This is used when accessing the Data Access Portal from the the Management Studio"
      responses:
        200:
          description: OK

  /login/{provider_id}:
    post:
      description:
        This starts an openid connect authentication prosess. The user will eventually be redirected back to the
        '/login_callback/{provider_id}' endpoint.
      operationId: authentication.login
      responses:
        302:
          description:
            A redirect to the authentication provider's login-page.

      parameters:
        - name: provider_id
          in: path
          description:
            The name of the openid connect authentication provider. This must match
            a provider that has been configured in the databrowser.ini file.
          required: true
          type: string

  /login_callback/{provider_id}:
    get:
      description:
        The user is redirected back here after authenticating with an
        openid connect authentication provider.
      operationId: authentication.login_callback
      responses:
        302:
          description:
            Redirect to the DAP frontpage

      parameters:
        - name: provider_id
          in: path
          description:
            The name of the openid connect authentication provider. This must match
            a provider that has been configured in the databrowser.ini file.
          required: true
          type: string

        - name: code
          in: query
          description:
            A short-lived authorization code from the authentication provider. The DAP backend will use this
            code to retrieve the user's information from the authentication provider.
          type: string

  /logout:
    get:
      operationId: authentication.logout
      description:
        This logs out the current user
      responses:
        302:
          description:
            Redirect to the DAP frontpage

  /otp_login:
    get:
      operationId: otp_login.otp_login_get
      description:
        This is called when the user has clicked on a login-link in an email or sms.

      parameters:
        - name: email_or_mobilephonenumber
          in: query
          description: The email address or mobile phonenumber of the user
          required: true
          type: string
          allowEmptyValue: false

        - name: otp
          in: query
          description: The one-time password the user got on in an email or sms.
          required: true
          type: string
          allowEmptyValue: false

      responses:
        302:
          description:
            Redirect to the DAP frontpage

    post:
      operationId: otp_login.otp_login_post
      description:
        This is called when the user has entered an email address or a mobile phonenumber in the
        gui and clicked the "Next" button.

      parameters:
        - name: email_or_mobilephonenumber
          in: formData
          description: The email address or mobile phonenumber of the user
          required: true
          type: string
          allowEmptyValue: false

      responses:
        200:
          description: The response is just an empty json object "{}".
          schema:
            type: object
            additionalProperties: false

  /select_language:
    post:
      operationId: language.select_language_view
      description:
        Stores the user's selected language in the http session.
      parameters:
        - name: lang
          in: formData
          type: string
          description: The language-code ('en', 'no) that the user has selected.
      responses:
        200:
          description: OK

  /update_loc:
    post:
      operationId: location.update_location_view
      description:
        Stores the user's geographical location. This is used to avoid having to ask the user for their location
        the next time the Data Access Portal is loaded. This endpoint should only be called if the "use_user_location"
        config option in the "main" config section has been set to "true".
      parameters:
        - name: location
          in: formData
          type: string
      responses:
        200:
          description: OK

  /accessrequests:
    post:
      operationId: accessrequests.accessrequest_create
      produces:
        - application/json

      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - publicKey
              - deleteRequest
              - lang
            properties:
              publicKey:
                type: string
                description:
                  The public key to use when encrypting the user's data.

              deleteRequest:
                type: boolean
                description:
                  Specified if this is a delete-request or not

              lang:
                type: string
                description:
                  The language that is currently selected in the browser

              extraFields:
                type: object
                description:
                  This is a mapping from field-id to field-value for any extra fields that
                  the user has filled in. The field-ids must be the same as the ones defined in the
                  'extra_access_request_fields' config-option in the 'gdpr' config-section.

              contactinfo:
                type: string
                description:
                  If the 'access_request_contactinfo' config-option in the 'gdpr' config-section is set, this
                  field must be specified, and contain a mobile phonenumber or email address.

      responses:
        200:
          description: The response is just an empty json object "{}".
          schema:
            type: object
            additionalProperties: false


  /access_request_validate_extra_fields:
    post:
      operationId: accessrequests.access_request_validate_extra_fields
      responses:
        200:
          description: OK
        400:
          description: validation failure

  /accessrequests_update:
    post:
      operationId: accessrequests.accessrequests_update
      description:
        Updates an existing gdpr access request.
      parameters:
        - name: publicKey
          description:
            The public key that was specifed when first creating the access request.
          in: formData
          type: string
          required: true
          allowEmptyValue: false

        - name: action
          description:
            The action to perform on the access request.
          type: string
          enum: ["update", "delete", "add-purpose-to-access-request"]
          in: formData

        - name: value
          description:
            This parameter is only used if the "action" parameter is "add-purpose-to-access-request".
          in: formData
          type: string

      responses:
        200:
          description: OK

  /accessrequest_login:
    post:
      operationId: accessrequests.accessrequest_login
      description:
        This is called by the client after the user has logged on (only when an accessrequest has been
        made previously).
        This will allow the client to read the data associated with the accessrequest that belongs to the
        specified publicKey.
      parameters:
        - name: publicKey
          description:
            The public key that was specifed when first creating the access request.
          in: formData
          type: string
          required: true
          allowEmptyValue: false

      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/LoginInfo'

  /dataservice/search:
    get:
      operationId: dataservice.dataservice_search
      responses:
        200:
          description: OK

  /dataservice/daterange:
    get:
      operationId: dataservice.dataservice_daterange
      responses:
        200:
          description: OK

  /dataservice/itemdetails:
    get:
      operationId: dataservice.dataservice_itemdetails
      responses:
        200:
          description: OK

  /changerequests:
    get:
      operationId: changerequests.changerequests
      description:
        Gets all changerequests for the specified document
      parameters:
        - name: subject
          in: query
          type: string
          required: true
          allowEmptyValue: false

      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/ChangeRequest'

  /favicon.ico:
    get:
      operationId: favicon.favicon_view
      responses:
        200:
          description: OK

  /browserconfig.xml:
    get:
      operationId: favicon.browserconfig_view
      responses:
        200:
          description: OK

  /admin_index:
    get:
      operationId: admin.admin_index.admin_index
      responses:
        200:
          description: OK

  /configuration:
    options:
      operationId: admin.configuration.configuration_options

      parameters:
        - name: content_only
          in: query
          required: false
          type: string

      responses:
        200:
          description: OK

    get:
      operationId: admin.configuration.configuration
      description:
        Returns a html page that lets the user view the current configfile settings.
      produces:
        - text/html
      parameters:
        - name: content_only
          description:
            If this is set to 'true', only the content-part of the html-page will be returned (i.e no enclosing
            <html> or <body> tags). This is used when the Management Studio wants to embed the DAP config on
            a page.
          in: query
          required: false
          type: string
      responses:
        200:
          description: OK

  /configuration/{config_file_path}:
    get:
      operationId: admin.configuration.configuration_file_in_base_layer_get
      description:
        Returns the specified configuration file in the base configuration layer. Files in the base layer
        overrides the configfiles in all other config-layers.
      parameters:
        - $ref: '#/parameters/config_file_path'
      produces:
        - text/plain
        - application/octet-stream
      responses:
        200:
          description:
            The response-body is the content of the specified file. If the file didn't exist, the response-body
            will be empty.

    put:
      operationId: admin.configuration.configuration_file_in_base_layer_put
      description:
        Uploads the specified configuration file.
      parameters:
        - $ref: '#/parameters/config_file_path'
        - $ref: '#/parameters/validate_only'

      produces:
        - application/json
      responses:
        200:
          description:
            The file was uploaded ok. Note that the response may still contain configuration errors.
          schema:
            $ref: '#/definitions/ConfigFilePutOrDeleteResponse'

        403:
          description:
            The file could not be uploaded, since that would prevent the current user from making any
            more modifications to the configfiles.
          schema:
            $ref: '#/definitions/ConfigFilePutOrDeleteResponse'

    delete:
      operationId: admin.configuration.configuration_file_in_base_layer_delete
      description:
        Deletes the specified configuration file.
      parameters:
        - $ref: '#/parameters/config_file_path'
        - $ref: '#/parameters/validate_only'
      produces:
        - application/json
      responses:
        200:
          description:
            The file was deleted ok. Note that the response may still contain configuration errors.
          schema:
            $ref: '#/definitions/ConfigFilePutOrDeleteResponse'

        403:
          description:
            The file could not be deleted, since that would prevent the current user from making any
            more modifications to the configfiles.
          schema:
            $ref: '#/definitions/ConfigFilePutOrDeleteResponse'


  /configuration/conf/{config_layer}/{config_file_path}:
    options:
      operationId: admin.configuration.configuration_conf_options

      parameters:
        - $ref: '#/parameters/config_layer'
        - $ref: '#/parameters/config_file_path'

      responses:
        200:
          description: OK

    get:
      operationId: admin.configuration.configuration_file_in_config_layer
      description:
        Returns the specified configuration file.
      parameters:
        - $ref: '#/parameters/config_layer'
        - $ref: '#/parameters/config_file_path'
      produces:
        - text/plain
        - application/octet-stream
      responses:
        200:
          description:
            The response-body is the content of the specified file. If the file didn't exist, the response-body
            will be empty.

    put:
      operationId: admin.configuration.configuration_file_in_config_layer_put
      description:
        Uploads the specified configuration file.
      parameters:
        - $ref: '#/parameters/config_layer'
        - $ref: '#/parameters/config_file_path'
        - $ref: '#/parameters/validate_only'
      produces:
        - application/json
      responses:
        200:
          description:
            The file was uploaded ok. Note that the response may still contain configuration errors.
          schema:
            $ref: '#/definitions/ConfigFilePutOrDeleteResponse'

        403:
          description:
            The file could not be uploaded, since that would prevent the current user from making any
            more modifications to the configfiles.
          schema:
            $ref: '#/definitions/ConfigFilePutOrDeleteResponse'

    delete:
      operationId: admin.configuration.configuration_file_in_config_layer_delete
      description:
        Deletes the specified configuration file.
      parameters:
        - $ref: '#/parameters/config_layer'
        - $ref: '#/parameters/config_file_path'
        - $ref: '#/parameters/validate_only'
      produces:
        - application/json
      responses:
        200:
          description:
            The file was deleted ok. Note that the response may still contain configuration errors.
          schema:
            $ref: '#/definitions/ConfigFilePutOrDeleteResponse'

        403:
          description:
            The file could not be deleted, since that would prevent the current user from making any
            more modifications to the configfiles.
          schema:
            $ref: '#/definitions/ConfigFilePutOrDeleteResponse'


  /configuration_redis_upload_form:
    get:
      operationId: admin.configuration.configuration_redis_upload_form
      produces:
        - text/html
      description:
        This return an admin-page for uploading redis configuration triples.
      responses:
        200:
          description: OK


  /configuration_yaml_dump:
    get:
      operationId: admin.configuration.configuration_yaml_dump
      responses:
        200:
          description: OK

  /configuration_localization_strings:
    options:
      operationId: admin.configuration.options_localization_strings
      responses:
        200:
          description: OK

    get:
      operationId: admin.configuration.get_localization_strings
      description:
        Returns a list of all the localizations strings. This endpoint is used by the translation gui
        in the management studio. The ordering reflects the ordering in the hardcoded
        "databrowser.ini"-file.
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/LocalizationStringInfo'

  /configuration_localization_strings/overrides/{language}/{localization_string_id}:
    options:
      operationId: admin.configuration.options_localization_string_override
      parameters:
        - $ref: '#/parameters/localization_string_override_language'
        - $ref: '#/parameters/localization_string_override_string_id'
      responses:
        200:
          description: OK

    put:
      operationId: admin.configuration.put_localization_string_override
      description:
        Stores an overridden value for the specified localization string. This endpoint is used by the translation gui
        in the management studio.
      parameters:
        - $ref: '#/parameters/localization_string_override_language'
        - $ref: '#/parameters/localization_string_override_string_id'
      responses:
        200:
          description: OK

    delete:
      operationId: admin.configuration.delete_localization_string_override
      description:
        Removes any overridden value for the specified localization string. This endpoint is used by the translation gui
        in the management studio.
      parameters:
        - $ref: '#/parameters/localization_string_override_language'
        - $ref: '#/parameters/localization_string_override_string_id'
      responses:
        200:
          description: OK


  /gdpr/fileblob_download/{file_id}:
    get:
      operationId: gdpr.gdpr_fileblob_download
      parameters:
        - name: file_id
          in: path
          description: The id of the file. This value must be url-encoded.
          required: true
          type: string
      responses:
        200:
          description: OK

  /gdpr/download:
    get:
      operationId: gdpr.gdpr_download
      responses:
        200:
          description: OK

  /configuration_redis:
    options:
      operationId: admin.configuration.configuration_redis_options
      responses:
        200:
          description: OK
    get:
      operationId: admin.configuration.configuration_redis_get
      description:
        Returns the configuration triples that are stored in redis.
      produces:
        - text/plain
      responses:
        200:
          description: OK
    put:
      operationId: admin.configuration.configuration_redis_put
      responses:
        200:
          description: OK
    post:
      operationId: admin.configuration.configuration_redis_post
      responses:
        200:
          description: OK

  /configuration_redis_upload_form:
    options:
      operationId: admin.configuration.configuration_redis_upload_form_options
      responses:
        200:
          description: OK
    get:
      operationId: admin.configuration.configuration_redis_upload_form
      responses:
        200:
          description: OK

  /configuration_fields_config:
    get:
      operationId: admin.configuration.configuration_fields_config
      description:
        Returns the current field-config settings. This is used by clients that need to do client-side
        field-formatting (for instance when the databrowser is used as a GDPR portal, and we do
        client-side decryption of fields.
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ConfigurationFieldConfig'

  /edit:
    post:
      operationId: edit.edit
      responses:
        200:
          description: OK

  /datatypes:
    get:
      operationId: admin.datatypes.datatypes
      responses:
        200:
          description: OK

  /logging:
    get:
      operationId: admin.logging.loggingconfig
      responses:
        200:
          description: OK

  /logging/loggers:
    get:
      operationId: admin.logging.loggingconfig_get_loggers
      responses:
        200:
          description: OK

  /logging/loggers/{logger_name}:
    post:
      operationId: admin.logging.loggingconfig_logger
      parameters:
        - name: logger_name
          in: path
          required: true
          type: string
      responses:
        200:
          description: OK

  /searchresult_explanation:
    get:
      operationId: admin.searchresult_explanation.searchresult_explanation
      responses:
        200:
          description: OK

  /caching/clear:
    post:
      operationId: admin.caching.clear_caches
      responses:
        200:
          description: OK

  /status:
    options:
      operationId: status.options_status
      responses:
        200:
          description: OK

    get:
      operationId: status.get_status
      description:
        This endpoint returns misc information about the databrowser.

      responses:
        200:
          description: The response is just an empty json object "{}".
          schema:
            type: object
            additionalProperties: false
            required:
              - feature-level
              - start_time
              - uptime
              - version

            properties:
              feature-level:
                type: integer
                description:
                  API feature level used by the Management Studio GUI for backwards compatibility.
              start_time:
                type: string
                description:
                  A human-readable datetime string that specified when the databrowser backend was started
              uptime:
                type: string
                description:
                  A human-readable string that described how long the databrowser backend has been running. This
                  value is derived from the "start_time"-value, and it just included as a convenience.
              version:
                type: string
                description:
                  The git-commit that this DAP instance was built from.
                example: e1a98d542096b48ead2bf93b8539a0b97787be60

definitions:
  LocalizationStringInfo:
    description:
      This is an object with information about one localization string (the entries of the
      [localization] section in the databrowser.ini file(s)).
    type: object
    required:
      - id
      - description
      - defaults
      - overrides
    additionalProperties: false
    properties:
      id:
        type: string
        description:
          The id of the localization string
      description:
        type: string
        description:
          A description of what the localization string is used for.
      defaults:
        type: object
        description:
          This is a mapping from language ("en", "no", etc) to the hardcoded
          hardcoded default value of this localization string for that language. This is the
          value that will be used if no end-user defined translation of this string has
          been made.
      overrides:
        type: object
        description:
          This is a mapping from language ("en", "no", etc) to the end-user
          specified translations of this localization string for that language. The values here will
          override the values in the "defaults" mapping.


  ChangeRequest:
    description:
      This is a list of RDF triples that describes the change request.
      There is one triple for each of the possible values of the "property"-property.
    type: array
    items:
      type: object
      required:
        - subject
        - property
        - object
        - literal
        - datatype

      properties:
        subject:
          type: string
          description:
            The id of the change-request
          example: "http://data.sesam.io/schema/system%3Asomething/foobar_1527237417.4104342"

        property:
          type: string
          enum: [
            "http://data.sesam.io/schema/browser/userId",
            "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
            "http://data.sesam.io/schema/browser/timestamp_value",
            "http://data.sesam.io/schema/browser/accessRequestSubjectId",
            "http://data.sesam.io/schema/browser/accessRequestId",
            "http://data.sesam.io/schema/browser/object_id",
            "http://data.sesam.io/schema/browser/field_value",
            "http://data.sesam.io/schema/browser/old_value",
            "http://data.sesam.io/schema/browser/new_value"
          ]

        object:
          type: string

        literal:
          type: boolean

        datatype:
          type: string


  LoginInfo:
    type: object
    additionalProperties: false
    required:
      - is_authenticated
      - gdpr_mode
      - name
      - user_id
      - domain
      - email
      - contactinfo
      - language
      - user_selectable_languages
      - userobject_id
      - use_profilepage_as_startpage
      - can_edit
      - can_download_gdpr_data
      - gdpr_hide_delete_me_button
      - can_logout
      - can_login
      - can_see_debug_controls
      - default_field_visibility
      - otp_login_with_email
      - otp_login_with_sms
      - authentication_providers

    properties:
      is_authenticated:
        type: boolean
        description:
          True if the current user has been authenticated

      gdpr_mode:
        type: boolean
        description:
          True if the DAP is being used as a gdpr portal.

      name:
        type: string
        description:
          The human-readable name of this user if available, otherwise an empty string.
          (When the user is logged in with an openid connect authentication
          provider we usually get the user actual name in addition to the (possibly cryptic) user_id.)

      user_id:
        type: string
        description:
          The internal (possibly crypting) id of the user.

      domain:
        type: string
        description:
          This is only used the user is authenticated via an "X-Remote-User" request header. In that case
          the header-value typically contains both a domain and a username.

      email:
        type: string
        description:
          The user's email-address if available, otherwise an empty string.

      contactinfo:
        type: string
        description:
          The user's contact information if available, otherwise an empty string. This can be an email-address or
          a mobile phone number.

      language:
        type: string
        description:
          The language the DAP has been configured to use.
        x-example:
          en

      user_selectable_languages:
        type: array
        items:
          type: object
          additionalProperties: false
          required:
            - language_code
            - display_name
          properties:
            language_code:
              type: string
              x-example: no
            display_name:
              type: string
              description: The human-readable name of the language (in that language)
              x-example: Norsk

      userobject_id:
        type: string
        description:
          The id of the document that represents the currently logged in user.

      use_profilepage_as_startpage:
        type: boolean

      can_edit:
        type: boolean
        description:
          True if this user is allowed to edit the configuration settings.

      can_download_gdpr_data:
        type: boolean
        description:
          True if the user has some gdpr data available for download.

      gdpr_hide_delete_me_button:
        type: boolean
        description:
          True if the GDPR "Delete me" button should be hidden. In some cases this button doesn't make a lot
          of sense.

      can_logout:
        type: boolean
        description:
          True if the "Logout"-button should be displayed.
          It is not possible to log out when using the x-remote-user authentication, since the idea is that
          the browser should just pass along the authentication-info the user used to log into the desktop session.

      can_login:
        type: boolean
        description:
          True if the various login-buttons should be displayed.

      can_see_debug_controls:
        type: boolean
        description:
          True if the user should be allowed to view the various debug controls by setting the
          "showdebugcontrols" url parameter.

      default_field_visibility:
        type: integer
        description:
          This is 0 (zero) if all item fields are to be hidden by default. If this is 0, only the
          fields that have been explicitly set to visible will be displayed to the end-user.
          If this is 1, all item fields will be displayed by default, and only the fields that has
          been explicitly set as "not visible" will be hidden from the user.
        minimum: 0
        maximum: 1

      otp_login_with_email:
        type: boolean
        description:
          True if the login via a One Time Password on email is enabled.

      otp_login_with_sms:
        type: boolean
        description:
          True if the login via a One Time Password on sms is enabled.

      authentication_providers:
        type: array
        items:
          type: object
          required:
            - id
            - login_url

          properties:
            id:
              type:
                string
              description:
                The unique id of the provider

            login_url:
              type: string
              description:
                The url to go to to start authenticating with this provider

            icon:
              type: string
              description:
                Optional. An url to the icon that should be used on the login-button for this provider.


  ConfigurationFieldConfig:
    type: object
    description:
      This is an object that describes the user-defined configuration of the fieldtypes.
      Each of the object's attributes is a field-id, and the value of the attribute is the field
      configuration.
      Examples&#58;
      "http&#58;//data.bouvet.no/sesam/seleniumttest/fields/TestDateBoosting/setUpClass/datefieldx"&#58; {
        "displayfield"&#58; "",
        "editable"&#58; 0,
        "group"&#58; "TestDateBoosting",
        "renderer"&#58; "default",
        "searchfield"&#58; "date",
        "sortorder"&#58; "",
        "visible"&#58; 1,
        "label"&#58; "http&#58;//data.bouvet.no/sesam/seleniumttest/fields/TestDateBoosting/setUpClass/datefieldx",
        "group_is_default_fallback"&#58; true,
        "groupsortorder"&#58; 0
      },
      "http&#58;//data.bouvet.no/sesam/seleniumttest/test_attribute_type2_id"&#58; {
        "displayfield"&#58; "",
        "editable"&#58; 0,
        "group"&#58; "sesam",
        "renderer"&#58; "default",
        "searchfield"&#58; "",
        "sortorder"&#58; "",
        "visible"&#58; 1,
        "label"&#58; "Label for test_attribute_type2_id from redis_configuration_triples",
        "group_is_default_fallback"&#58; true,
        "groupsortorder"&#58; 0
      },

  ConfigFilePutOrDeleteResponse:
    type: object
    description:
      This is the response given when the user uploads or deletes a configfile
    required:
       - is-valid-config
       - current-user-would-be-locked-out
       - config-errors
    properties:
      is-valid-config:
        type: boolean
        description:
          True if the resulting set of configuration files contains no errors.

      current-user-would-be-locked-out:
        type: boolean
        description:
          True if the attempted change to the file would result in the current user not being able to
          modify the configfiles any more.

      config-errors:
        description:
          A list of configuration errors. Note that this is the errors from the full set of configuration files, so
          it may contain errors that are not related to the file being uploaded/deleted.
        type: array
        items:
          type: object
          required:
             - level
             - msg
          properties:
            level:
              type: string
              description:
                The severity of the problem.
              enum: ["warning", "error", "critical"]
            msg:
              type: string
              description:
                A human-readable description of the problem.

parameters:
  focus:
    name: focus
    in: query
    type: string
    description:
      The id of the section that the user wants to focus on.
    x-example: "what"

  edit:
    name: edit
    in: query
    type: string
    description:
      This parameter is set when the user has clicked on the "Edit" button. The DAP is then
      put into "edit"-mode, where the user can change various configuration settings (field
      labels, etc).
    enum: ["1"]

  q:
    name: q
    in: query
    type: string
    description:
      The user-entered searchstring
    x-example: John Doe

  start:
    name: start
    in: query
    type: string
    description:
      The start-date(time) to use in the query. This must be specified as either a date on the form
      "YYYY-MM-DD" or as a datetime on the form "YYYY-MM-DDThh:mm:ssZ". Documents older than this will not
      included in the searchresults.
    x-example:
      2018-05-22
      2018-05-22T07:40:10Z

  end:
    name: end
    in: query
    type: string
    description:
      The end-date(time) to use in the query. This must be specified as either a date on the form
      "YYYY-MM-DD" or as a datetime on the form "YYYY-MM-DDThh:mm:ssZ". Documents newer that this will not be
      included in the searchresults.
    x-example:
      2018-05-23
      2018-05-23T07:40:10Z

  selected:
    name: selected
    in: query
    type: string
    description:
      The id of the currently selected document, if any.
    x-example: https://www.example.com/schema/item/1234

  depth:
    name: depth
    in: query
    type: integer
    description:
      If depth == 0, it means that we just want to do a normal search. If depth > 0 we want to find the nodes
      that are connected to the nodes found in the normal search. The depth2* parameters specifies the solr
      query params for the various depths

  location:
    name: location
    in: query
    type: string
    description:
      A geographical location used to boost searchresults.
    x-example:
      58.9682,-54.2895

  config_layer:
    name: config_layer
    in: path
    type: string
    required: true
    description:
      The configuration layer of the file. Configuration files in higher-numbered layers override
      configfiles in lower-numbered layers.

  config_file_path:
    name: config_file_path
    in: path
    type: string
    required: true
    description:
      The full file path of the configuration file. Note that the openapi spec doesn't support
      'rest of path'-type parameters, so this parameter-definition isn't 100% accurate. This parameter
      should not actually be url-escaped in any way. For instnace, to retrieve the configfile in the
      folder "/sesam/data/conf/42/css/temp/test.css", the url used should just be
      ``https://<dap-backend>/configuration/conf/42/css/temp/test.css``.

  validate_only:
    name: validate_only
    in: query
    type: boolean
    required: false
    default: false
    description:
      If this is set to "true", no actual changes will be done to the configuration; only the validation
      checks will be run.

  localization_string_override_language:
    name: language
    in: path
    type: string
    required: true
    description:
      The languagecode ("no", "en", etc)
    x-example: en

  localization_string_override_string_id:
    name: localization_string_id
    in: path
    type: string
    required: true
    description:
      The id of the localization string.
    x-example: otp_login-login-button-text


securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: |
     For accessing the API a valid JWT token can be passed in all the queries in
     the 'Authorization' header.

     The following syntax must be used in the 'Authorization' header :

         Bearer <JWT token>
